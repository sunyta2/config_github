
끊임없이 변동하는 세상에서 복잡성을 다루는 것이 중요한 과제가 된다.

** 
CHC - __GLASSGOW__ GLORIOUS HASKELL COMPILER
> ghci
:t
+set :t
:load
Emacs + Haskell mode
C-c C-b | C-c C-l
함수가 argument가 없으면 definition이지만 기본적으로 function이다.
- function name must start with small letter. 함수명은 첫철자가 소문자라야 한다.
helloWorld = "Hello World"
> helloWorld

it's actually a one argument function 모든 함수는 단일변수를 취하는 함수이다. 13:00
좋은 설명이다.
answerToEverything = 42
complexCalc x y z = x * y * z * answerToEverything

:t complexCalc
complexCalc :: Integer -> Integer -> Integer -> Integer
complexCalc :: Integer -> (Integer -> (Integer -> Integer))

complexCalc 10 20 30
((complexCalc 10) 20) 30

'a' is a type variable, which means that length can be applied to list of any type.
Polymorphic Types
Prelude> :t length
length :: Foldable t => t a -> Int
Prelude> 
Prelude> numbers = [ 1, 3, 5, 7]
Prelude> numbers !! 3
7
Prelude> numbers!!2
5
Prelude> null numbers 
False
* Prelude> [ 2 ^ x | x <- [ 1..5]]
                       | '← such as'  <- '← is derived from'   -> [2,4,8,16,32]

: Prelude> [ 2 ^ x | x <- [ 1..5]] -> [2,4,8,16,32]
#+begin_src haskell
[1..3]


[(x,y) | x <- [1..5], y <- [1..5]] -> [(1,1),(1,2),(1,3), ...
[(x,y) | x <- [1..2], y <- [x-1..2]]
[(x,y) | x <- [1..2], y <- [x-1..2]] -> [(1,0),(1,1),(1,2),(2,1),(2,2)]
[x | x <- [1..7], x `mod` 2 == 0] -> [2,4,6]
`mod` 로 infix operator로 사용가능함 {중요함-중간오퍼레이터로 사용함} 사실상 IF 조건문으로 사용하는 놀라움


#+end_src


*** TYPE CLASSES

Type class is a set of types which support certain collection of functions defined by the class.



#+begin_src sh :results silent
espeak -a 20 -v other/la "amare"
#+end_src

