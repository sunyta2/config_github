-*- coding: utf-8 -*-
#+STARTUP: showeverything indent
#+TITLE: syntax_of_array_in_sh.org /shell/


배열을 다루는 법 요약

* 배열문장이다 vals=(beep bop) # array use in command 
#+BEGIN_SRC sh :results raw
  i=2
  vals=(beep bop i[2]배열_간단문장) # 이것이 배열의 기본문장이다. ;;[[https://stackoverflow.com/questions/17983586/bash-how-can-i-get-the-variable-value-inside-the-eof-tags][linux - BASH - how can i get the variable value inside the EOF tags? - Stack Overflow]]

  cat << EOF
      This is a beep: ${vals[$i]}
  EOF
#+END_SRC

#+RESULTS:
    This is a beep: i[2]배열_간단문장
    This is a beep: 배열_간단문장
    This is a beep: beep
  
배열의 모음.
# cribbed from redshift, https://github.com/jonls/redshift/blob/master/README-colorramp
GAMMA_VALS=('1.0:0.7:0.4'  # 3000K
            '1.0:0.7:0.5'  # 3500K
            '1.0:0.8:0.6'  # 4000K
            '1.0:0.8:0.7'  # 4500K
            '1.0:0.9:0.8'  # 5000K
            '1.0:0.9:0.9'  # 6000K
            '1.0:1.0:1.0'  # 6500K
            '0.9:0.9:1.0'  # 7000K
            '0.8:0.9:1.0'  # 8000K
            '0.8:0.8:1.0'  # 9000K
            '0.7:0.8:1.0') # 10000K
# https://github.com/philippnormann1337/xrandr-brightness-script/blob/master/brightness.sh

get_gamma_index() {
    for i in "${!GAMMA_VALS[@]}"; do
        [[ "${GAMMA_VALS[$i]}" = "$1" ]] && echo "$i" && break
    done
}


#+BEGIN_SRC sh


#+END_SRC

* $ echo {2..9}
2 3 4 5 6 7 8 9

* $ a=(1 2 3)

$ echo $(a[1])
bash: a[1]: command not found

$ echo $((a[1]))
2
$ echo $a
1



* get_pid_experiment

#+BEGIN_SRC sh :results raw
#!/usr/bin/bash
# 실험용
PIDS=(99 100)
for i in `seq 1 3; seq 15 18`; do
  PIDS+=($i)
  echo "PIDS is now ${PIDS[@]}"
done

PIDS2=(`seq 5 7; seq 9 12`)
echo "PIDS2 is ${PIDS2[@]}"

PIDS3=(1 3 5)
echo "PIDS3 is ${PIDS3[@]}"
PIDS3+=(7 9 11)
echo "PIDS3 is ${PIDS3[@]}"
#sleep 2
for pid in ${PIDS[@]}; do
#kill $pid
  echo $pid
#sleep 0.2
done
                # from youtube "xmonad Part 2 on Code Deconstructed - Episode 4 02:25 "
#+END_SRC
file:syntax_of_array_in_sh.org
#+RESULTS:
PIDS is now 99 100 1
PIDS is now 99 100 1 2
PIDS is now 99 100 1 2 3
PIDS is now 99 100 1 2 3 15
PIDS is now 99 100 1 2 3 15 16
PIDS is now 99 100 1 2 3 15 16 17
PIDS is now 99 100 1 2 3 15 16 17 18
PIDS2 is 5 6 7 9 10 11 12
PIDS3 is 1 3 5
PIDS3 is 1 3 5 7 9 11
99
100
1
2
3
15
16
17
18
PIDS is now 99 100 1
PIDS is now 99 100 1 2
PIDS is now 99 100 1 2 3
PIDS is now 99 100 1 2 3 15
PIDS is now 99 100 1 2 3 15 16
PIDS is now 99 100 1 2 3 15 16 17
PIDS is now 99 100 1 2 3 15 16 17 18
PIDS2 is 5 6 7 9 10 11 12
PIDS3 is 1 3 5
PIDS3 is 1 3 5 7
99
100
1
2
3
15
16
17
18



