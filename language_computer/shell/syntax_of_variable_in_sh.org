-*- coding: utf-8 -*-
#+STARTUP: showeverything indent
#+TITLE: /shell/syntax_of_variable_in_sh.org
(man "test")
(find-file "../shell/syntax_of_test_in_sh.org")
(find-file "../shell/syntax_of_if_in_sh.org")




* 단어추출 awk[fn:1] awk '$1 == "eDP-1" {print $5}'

* 첫글자만 추출하는 법
- ~/.bin/rotate 에서 zenity의 설명문을 변경하느 법을 익히는 것임 첫글자만 추출에서 Case문을 깔끔하게 한다.
** 첫글자추출법
    #+BEGIN_SRC sh :results raw
      v="abcde"
      v2=${v:0:1}
      #v2=${v::-4}
      echo $v2
    #+END_SRC

    #+RESULTS:
    a


** 글자제거법
    #+BEGIN_SRC sh
      v2=${v::-4}

      ## To remove four characters from the end of the string use ${var%????}.
      ${var%????}

      ## To remove everything after the final . use ${var%.*}.
      ${var%.*}
      ## 참조: a=\"$(cat)\"; a=\"${a//-/ }\"; a=\"${a//\\*/}\"; 특히 \\* 에서 \가 2개인 \\로 전달해야 됨. 원래의도 : ***를 제거해서 깔끔한 제목을 espeak로 읽는 기능을 함수로 구현하려했음
      # ;; elisp:(call-shell-region (line-beginning-position 0) (line-end-position 0) "a=\"$(cat)\"; a=\"${a//-/ }\"; a=\"${a//\\*/}\";for i in 0; do espeak \"$a\"; sleep $((i*3)); done" nil nil)
    #+END_SRC
#+BEGIN_SRC sh
  var="*** 123.org"
  # echo ${var%.*}
  # : bash bashrc_IN_arco change_default_editor_bash_zsh_test.org get_url_link_using_read_test.org get_url_link_using_read_test.org~ preserve_sed_command_output_with_here_string_test.org preserve_sed_command_output_with_here_string_test.org~ readme.org snippet_of_eval_in_sh_function_get_string_by_hardware_test.org snippet_of_eval_in_sh_function_get_string_by_hardware_test.org~ snippet_of_if1_in_sh.org snippet_of_if1_in_sh.org~ syntax_of_array_in_sh.org syntax_of_array_in_sh.org~ syntax_of_eval_string_in_sh.org syntax_of_eval_string_in_sh.org~ syntax_of_for_in_sh.org syntax_of_function_in_sh.org syntax_of_here_document_eof_in_sh.org syntax_of_here_document_eof_in_sh.org~ syntax_of_if_in_sh_good_note_test.org syntax_of_if_in_sh.org syntax_of_if_in_sh.org~ syntax_of_ln_in_sh.org syntax_of_ln_in_sh.org~ syntax_of_read_in_sh.org syntax_of_read_in_sh.org~ syntax_of_string_tail.org syntax_of_string_tail.org~ syntax_of_test_in_sh.org syntax_of_variable_in_sh.org syntax_of_while_in_sh.org test_reading_stuff.org test_reading_stuff.org~ variable_sed_change.org variable_sed_change.org~ zsh 123
  #echo "${var%.*}"
  #: *** 123
#echo "${var/\*/k}"
#: k** 123.org
#echo "${var//\*/k}"
#: kkk 123.org
  var="***--- 123.org"
#var="${var//-/}" # 이 둘을 통합시키는 구조가 좋을 것임
#var="${var//\*/}"
     # 에러남 이것>var="${$({var//\*/})//-/}"
echo "var , was , $var"
var="${var//[\*-]/}" # 통합에 성공함!
echo "var , is , ___   $var"
#+END_SRC

#+RESULTS:
| var | was | ***--- 123.org |
| var | is  | ___    123.org |

* 글자를 변경하는 최소의 방식

** 
   #+BEGIN_SRC sh
     # [[https://unix.stackexchange.com/questions/162221/shortest-way-to-replace-characters-in-a-variable][bash - shortest way to replace characters in a variable - Unix & Linux Stack Exchange]]

     $ echo ${#OUTPUT} 
     4900
     OUTPUT="$(tr -d "\"\`'" <<<$OUTPUT)"
     # Other alternatives include the already mentioned variable substitution which can be shorter than shown so far:

     OUTPUT="${OUTPUT//[\'\"\`]}"
     # And sed of course though this is longer in terms of characters:

     OUTPUT="$(sed s/[\'\"\`]//g <<<$OUTPUT)"


     $ time tr -d "\"\`'" <<<$OUTPUT
     real    0m0.002s
     user    0m0.004s
     sys     0m0.000s
     $ time sed s/[\'\"\`]//g <<<$OUTPUT
     real    0m0.005s
     user    0m0.000s
     sys     0m0.000s
     $ time echo ${OUTPUT//[\'\"\`]}
     real    0m0.027s
     user    0m0.028s
     sys     0m0.000s
   #+END_SRC

* cat을 변수로 저장하는 법 
#+BEGIN_SRC sh
# [[https://unix.stackexchange.com/questions/181423/how-to-assign-the-cat-output-of-a-bash-script-to-a-variable-in-another-script][How to assign the cat output of a bash script to a variable in another script - Unix & Linux Stack Exchange]]
var=$( cat foo.txt )
would store the output of the cat in variable var.

var=$( ./myscript )
would store the output of myscript in the same variable.
#+END_SRC
- 활용 변수반복에 사용하는 법을 이용한다. espeak while read /app/espeak/readme.org

- 시행착오를 거치며 완성된 영역선택에서 읽기를 실행하는 문장임
  - emacs M-|로 전달하는 법을 사용한다.
  strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak -g 60 -s 100 -v other/grc "$LINE"; sleep 3; done; sleep 3 done
                ;; 단문으로 만드는 것은 시행착오를 거치면서 완성되는 것이다. espeak -g 60 -s 100 -v other/grc /la를 실행


* 변수variable basis기본값을 설정하는 법 ${b:-$a} ${b:=$a} herbstluft
발견장소: herbstluft/autostart
hc keybind $Mod-Return       spawn ${TERMINAL:-urxvt} # ${TERMINAL:=urxvt} #변수기본값을 설정발견! syntax_variable
#+BEGIN_SRC sh

$ echo ${a:+123abc 123} # +는 안되는 듯하다.

$ echo ${a:-123abc 123} # 변수값 설정없이 임시사용
$ echo ${a:=123abc 123} # 변수값 설정으로 사용함
123abc 123
$ echo $a
123abc 123
$ echo ${b:-$a} # 안에 변수를 넣어서 그 값을 임시사용할 수 있다!
123abc 123
$ echo $a
123abc 123
$ echo $b

$ echo ${b:=$a} # 안에 변수를 넣어서 그 값을 설정사용할 수 있다!


#+END_SRC
* {변수값을 사용하는 변수}_이중변수_${!var_i} syntax 
#+BEGIN_SRC sh :results raw
  val_1=beep
  val_2=bop
  # # 이것이 배열의 기본문장이다. ;;[[https://stackoverflow.com/questions/17983586/bash-how-can-i-get-the-variable-value-inside-the-eof-tags][linux - BASH - how can i get the variable value inside the EOF tags? - Stack Overflow]]
      i=1
  val_i="val_$i"             # {변수값을 사용하는 변수}_이중변수_${!var} syntax.  
  cat <<EOF
  first cat,  This is val_i is val_1=beep: ${!val_i}
  EOF
  # That is, you compute the name of the variable you want, put that in another variable, and use the ${!var} syntax.
      i=2
  val_i="val_$i"             # {변수값을 사용하는 변수}_이중변수_${!var} syntax.  
  cat <<!EOF
  second cat, This is val_i is val_2=bop:  '${!val_i}'
  EOF

#+END_SRC

#+RESULTS:
first cat,  This is val_i is val_1=beep: beep
second cat, This is val_i is val_2=bop:  'bop'
EOF
first cat,  This is val_i is val_1=beep: beep
second cat, This is val_i is val_2=bop:  "bop"
EOF
first cat,  This is val_i is val_1=beep: beep
second cat, This is val_i is val_2=bop:  bop
EOF
first cat,  This is val_i is val_1=beep: beep
second cat, This is val_i is val_2=bop:  bop

** 참고 : [[https://stackoverflow.com/questions/37047717/how-to-create-a-variable-value-using-in-the-runtime-in-bash][linux - How to create a variable value using $ in the runtime in bash - Stack Overflow]]
* Footnotes

[fn:1] (find-file "../../app/awk/readme.org") ::*** note of awk command example
