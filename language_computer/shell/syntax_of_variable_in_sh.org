#+STARTUP: showeverything indent


* 첫글자만 추출하는 법
- ~/.bin/rotate 에서 zenity의 설명문을 변경하느 법을 익히는 것임 첫글자만 추출에서 Case문을 깔끔하게 한다.
** 첫글자추출법
    #+BEGIN_SRC sh :results raw
      v="abcde"
      v2=${v:0:1}
      #v2=${v::-4}
      echo $v2
    #+END_SRC

    #+RESULTS:
    a


** 글자제거법
    #+BEGIN_SRC sh
      v2=${v::-4}

      ## To remove four characters from the end of the string use ${var%????}.
      ${var%????}

      ## To remove everything after the final . use ${var%.*}.
      ${var%.*}
    #+END_SRC
* 글자를 변경하는 최소의 방식

** 
   #+BEGIN_SRC sh
     # [[https://unix.stackexchange.com/questions/162221/shortest-way-to-replace-characters-in-a-variable][bash - shortest way to replace characters in a variable - Unix & Linux Stack Exchange]]

     $ echo ${#OUTPUT} 
     4900
     OUTPUT="$(tr -d "\"\`'" <<<$OUTPUT)"
     # Other alternatives include the already mentioned variable substitution which can be shorter than shown so far:

     OUTPUT="${OUTPUT//[\'\"\`]}"
     # And sed of course though this is longer in terms of characters:

     OUTPUT="$(sed s/[\'\"\`]//g <<<$OUTPUT)"


     $ time tr -d "\"\`'" <<<$OUTPUT
     real    0m0.002s
     user    0m0.004s
     sys     0m0.000s
     $ time sed s/[\'\"\`]//g <<<$OUTPUT
     real    0m0.005s
     user    0m0.000s
     sys     0m0.000s
     $ time echo ${OUTPUT//[\'\"\`]}
     real    0m0.027s
     user    0m0.028s
     sys     0m0.000s
   #+END_SRC

* cat을 변수로 저장하는 법 
#+BEGIN_SRC sh
# [[https://unix.stackexchange.com/questions/181423/how-to-assign-the-cat-output-of-a-bash-script-to-a-variable-in-another-script][How to assign the cat output of a bash script to a variable in another script - Unix & Linux Stack Exchange]]
var=$( cat foo.txt )
would store the output of the cat in variable var.

var=$( ./myscript )
would store the output of myscript in the same variable.
#+END_SRC
- 활용 변수반복에 사용하는 법을 이용한다. espeak while read /app/espeak/readme.org

- 시행착오를 거치며 완성된 영역선택에서 읽기를 실행하는 문장임
  - emacs M-|로 전달하는 법을 사용한다.
  strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak -g 60 -s 100 -v other/grc "$LINE"; sleep 3; done; sleep 3 done
                ;; 단문으로 만드는 것은 시행착오를 거치면서 완성되는 것이다. espeak -g 60 -s 100 -v other/grc /la를 실행


* {변수값을 사용하는 변수}_이중변수_${!var} syntax.
#+BEGIN_SRC sh :results raw
  i=1
  val1=beep
  val2=bop
  # # 이것이 배열의 기본문장이다. ;;[[https://stackoverflow.com/questions/17983586/bash-how-can-i-get-the-variable-value-inside-the-eof-tags][linux - BASH - how can i get the variable value inside the EOF tags? - Stack Overflow]]
  rightval="val$i"             # {변수값을 사용하는 변수}_이중변수_${!var} syntax.
  cat <<EOF
  This is a beep: ${!rightval}
  EOF
  # That is, you compute the name of the variable you want, put that in another variable, and use the ${!var} syntax.
#+END_SRC

#+RESULTS:
This is a beep: beep
good
