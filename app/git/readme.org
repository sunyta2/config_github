
# git contents
(man "git")
file:///usr/share/doc/git-doc/user-manual.html
(start-process "emacs_pdf okular" nil "okular" ;; 빠른 단축으로 만드는 것은 C-c C-l elisp: 를 사용해서 넣으면 됨
  "-p" (int-to-string (+ 57 24)) ;-p 57; query_string.org
  "/home/thinkpad/Documents/learning_gnu_emacs.pdf" ) ;; 책을 읽을 것을 찾아서 등록해 둘 것.

file:../../app/emacs/man_in_emacs.org
(man "7" "gitcore-tutorial") ;; <에러안되는 문장구조>
(man "gitcore-tutorial(7)") (man "giteveryday")
(man "gittutorial") (man "gittutorial-2") (man "git-help")
(man "gitworkflows(7)")
  (man "git-log")
  (man "git-diff")
  (man "git-config")
  (man "git-shortlog")
  (man "git-log")
  (man "git-notes")

  (man "gitcvs-migration(7)")
  (man "gitglossary(7)")
  (man "gitcli(7)")
  (man "git-status")
  (man "gitignore")
  (man "git-stash")
  (man "git-commit")
  (man "git-stage")
  (man "git-add")
  (man "git-rm")
  (man "git-reset")
  (man "git-mv")
  (man "git-update-index")
  (man "git-merge")
  (man "git-branch")
  (man "git-log")
(man "urxvt")        urxvt [options] [-e command [ args ]]
(man "vim")/home/thinkpad/
(start-process "vim in urxvt" nil "urxvt" ;; 빠른 단축으로 만드는 것은 C-c C-l elisp: 를 사용해서 넣으면 됨
  "-e" "vim" )
;; :help 를 실행하는 것으로 문서에 대한 탐색을 시도한다.

- 다른방법 M-x term vim을 실행하는 것이 있으나 멀티터미널을 사용해야 할 가능성이 크다.

(start-process "emacs_pdf okular" nil "okular" ;; 빠른 단축으로 만드는 것은 C-c C-l elisp: 를 사용해서 넣으면 됨
  "-p" (int-to-string (+ 57 24)) ;-p 57; query_string.org
  "/home/thinkpad/Documents/learning_gnu_emacs.pdf" )



       git-check-ref-format(1), git-fetch(1), git-remote(1), “Understanding
       history: What is a branch?”[1] in the Git User’s Manual.


       git-fmt-merge-msg(1), git-pull(1), gitattributes(5), git-reset(1),
       git-diff(1), git-ls-files(1), git-add(1), git-rm(1), git-mergetool(1)


       git-status(1) git-rm(1) git-reset(1) git-mv(1) git-commit(1) git-
       update-index(1)


 gittutorial(7), gittutorial-2(7), giteveryday(7), gitcvs-migration(7),
       gitglossary(7), gitcore-tutorial(7), gitcli(7), The Git User’s
       Manual[1], gitworkflows(7)



* git contents

#+BEGIN_SRC sh
git reset --hard HEAD # only reset in repo 즉 add하여 스테이지된 것을 몽땅 원상복구함.
git clean -fd # only clean unstaged all 즉 등록되지 않은 파일은 모두 지음
git clean -fdn # 테스트용 dry-run 바로 위의 git clean -fd 즉  -n(--dry-run)은 Not-run으로 기억됨


#+END_SRC


* git diff --cached 

#+BEGIN_SRC sh
# --cached means show the changes in the cache/index (i.e. staged changes) against the current HEAD.
git diff --cached
# --staged is a synonym for --cached.
# --staged and --cached does not point to HEAD, just difference with respect to HEAD. 
# If you cherry pick what to commit using git add --patch (or git add -p), --staged will return what is staged.
#+END_SRC


* Reset, restore and revert in git(1)
 git revert is used to record some new commits to reverse the effect of some earlier commits (often only a
       faulty one). If you want to throw away all uncommitted changes in your working directory, you should see git-
       reset(1), particularly the --hard option. If you want to extract specific files as they were in another commit,
       you should see git-restore(1), specifically the --source option. 출처 : git revert --help

 git revert HEAD~3
 git revert -n master~5..master~2
git-cherry-pick(1)


git checkout sutract-feature
git cherry-pick b123
git checkout master

git reset --soft 0123 # 복귀하지만 파일을 삭제하지는 않음.
git reset --mixed 0123 # not staged
git reset --hard 0123 # 완전히 삭제하고 복구시킴. https://youtu.be/FdZecVxzJbk?t=780
    $ git clean -df # delete untracked file by This clean cmd
git reflog # 명령의 실행 을 기록해둔 중요한 보관소


* git config --list
git config --global user.name "LJP@thinkpad"
git config --global user.email "sunyta@yahoo.com"
git config --list



* git checkout calc.py # 틀린 것을 원상복귀하는 명령어.
- rm *2* && git status && git checkout *2* # 잘 작동됨을 확인함.

* 메시지의 변경 명령어 git commit --amend -m "--amend 로 메시지만 변경함"

* git commit -am "동시에 명령어"


*  git push --set-upstream origin other3_github

* git merge test 
git checkout master
git pull origin master
git merge test
git push origin master


* git branch -D delete-branch
git push origin home-changes

git checkout master
git merge home-changes

git push origin master



* git log --stat 

git log --all --decorate --oneline --graph
git log --stat 
