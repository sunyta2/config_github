#+STARTUP: showall indent

file:../mpv/readme.org file:../espeak/readme.org file:../okular/readme.org
file:/home/thinkpad/Desktop/pdf_list_of_desktop.org

- 감탄의 연속이다.: file:../../app/emacs/eloud.org

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;더 좋은 방법을 발견했다. 늘 즐거운 마음으로 혁신에 도전하는 것이 새로운 방법을 발견하는 태도이다.
(shell-command-on-region (+ (line-beginning-position 2) 0) (line-end-position 2) ;;줄의 위치를 변경하는 구조
			"espeak -a 20" nil nil nil)  ;;  출력버퍼를 상정함
  hello world 반갑습니다 세상이여!

(shell-command-on-region (+ (line-beginning-position 2) 0) (line-end-position 2) 
			"espeak -a 20 -g 27 -s 120 -v other/la" nil nil nil)
religionis deorum immortalium fanorum aediumque sacrarum conlocatio, 

;; 출력버퍼를 상정함 상세화

:기억하고_누르고즉시관찰실험하라!:
#+begin_text org :최종목적은 process중단이 간략히 진행됨이 성공함.
app/emacs/process.org espeak, mpv diary (delete-process (get-process "while true espeak greek latin"))


#+end_text org
:end:

* header
:PROPERTIES:
:TOC:      :include all
:END:
file:./toc-org.org
This text appears before the TOC.
(org-make-toc-mode)
:CONTENTS:
    - [[install][install]]
:END:
 (org-make-toc)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
* make espeak_above_eng_greek eng_latin
make espeak_eng

[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"echo%20\"process%20NAME:%20espeak_while\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"%20while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\"$string\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\"$string2\";%20sleep%203;"%0A%20"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\"$string\";%20sleep%209;"%0A"%20done;"%0A))][elisp:(espeak_while-Below=grc+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_while"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_while)]]  ;; 성공적인 정지력!!!
- [ ] δὲ 그리고 | μάλιστα 대부분
사랑한다 진리의 나여!
- DONE:timeout 15m 등의 연구가 성공함
- 성공한 명령문-문장 [2020-03-14 Sat 13:32] espek timeout 25 and while true ALL in espeak/readme.org
[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%2025m%20echo%20\"process%20NAME:%20espeak_timeout_25m\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%2025m%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_25m\\\"%20\""%0A))][elisp:(TIMEOUT 25m espeak_Below=grc+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_25m"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_25m)]]  ;; 성공적인 정지력!!!
- [ ] δὲ 그리고 | μάλιστα 대부분
사랑한다 진리의 나여!

[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%2025m%20echo%20\"process%20NAME:%20espeak_timeout_25m\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%2025m%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A%20"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_25m\\\"%20\""%0A))][elisp:(TIMEOUT 25m espeak_Below=latin+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_25m"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_25m)]]  ;; 성공적인 정지력!!!
- [ ] amare me
사랑한다 진리의 나여!


[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"echo%20\"process%20NAME:%20espeak_while\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"%20while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\"$string\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\"$string2\";%20sleep%203;"%0A%20"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\"$string\";%20sleep%209;"%0A"%20done;"%0A))][elisp:(espeak_while-Below=latin+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_while"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_while)]]  ;; 성공적인 정지력!!!
- [ ] amare me
사랑한다 진리의 나여!


- [ ] greek| latin
- eng(korean)



--- test for timeout 3m

- [ ] δὲ 그리고 | μάλιστα 대부분
사랑한다 진리의 나여!

[[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"timeout%205s%20ps%20aux"%20%0A"|%20grep%20espeak_while;"%20%0A"espeak%20-a%2030%20hi"))%0A][test_multiline]]
[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%209s%20echo%20\"process%20NAME:%20espeak_timeout_9s\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%209s%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A%20"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_9s\\\"%20\""%0A))][elisp:(TIMEOUT 9s성공!!! espeak_while-Below=latin+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_9s"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_9s)]]  ;; 성공적인 정지력!!!
- [ ] amare me
사랑한다 진리의 나여!

[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%2025m%20echo%20\"process%20NAME:%20espeak_timeout_25m\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%2025m%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A%20"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_25m\\\"%20\""%0A))][elisp:(TIMEOUT 25m성공!!! espeak_while-Below=latin+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_25m"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_25m)]]  ;; 성공적인 정지력!!!
- [ ] amare me
사랑한다 진리의 나여!


- 성공한 명령문-문장 [2020-03-14 Sat 13:32] in espeak/readme.org
[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%2025m%20echo%20\"process%20NAME:%20espeak_timeout_25m\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%2025m%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_25m\\\"%20\""%0A))][elisp:(TIMEOUT 25m espeak_Below=grc+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_25m"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_25m)]]  ;; 성공적인 정지력!!!
- [ ] δὲ 그리고 | μάλιστα 대부분
사랑한다 진리의 나여!

[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%2025m%20echo%20\"process%20NAME:%20espeak_timeout_25m\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%2025m%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A%20"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/la%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_25m\\\"%20\""%0A))][elisp:(TIMEOUT 25m espeak_Below=latin+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_25m"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_25m)]]  ;; 성공적인 정지력!!!
- [ ] amare me
사랑한다 진리의 나여!

[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20%0A(concat%20"timeout%2025m%20echo%20\"process%20NAME:%20espeak_timeout_25m\";"%0A"%20string=\""%20(buffer-substring-no-properties%20(+%20(line-beginning-position%202)%206)%20(line-end-position%202))%20"\";"%0A"%20string2=\""%20(buffer-substring-no-properties%20(line-beginning-position%203)%20(line-end-position%203))%20"\";"%0A"timeout%2025m%20bash%20-c%20\"while%20true;%20"%0A"%20do%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\\\"$string\\\";%20sleep%203;"%0A"%20%20%20%20espeak%20-a%2030%20-g%2060%20-s%20120%20\\\"$string2\\\";%20sleep%203;"%0A"%20%20%20espeak%20-a%2030%20-g%2060%20-s%20100%20-v%20other/grc%20\\\"$string\\\";%20sleep%209;"%0A"%20done;%20echo%20\\\"process%20NAME:%20espeak_timeout_25m\\\"%20\""%0A))][elisp:(TIMEOUT 25m espeak_Below=grc+en)]]   [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_timeout_25m"%20"|%20awk%20'{print%20$2}'"%20"|%20xargs%20-I{}%20kill%20-9%20{}"))][elisp:(kill espeak_timeout_25m)]]  ;; 성공적인 정지력!!!
- [ ] δὲ 그리고 | μάλιστα 대부분
사랑한다 진리의 나여!





사랑한다 진리의 나여!



elisp:(start-process-shell-command "kill using pipe BY using concat CMD! in timeout" nil (concat "ps aux" 
"| grep espeak_while;" 
"espeak -a 30 hi"))
[[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20%0A"|%20grep%20espeak_while;"%20%0A"espeak%20-a%2030%20hi"))%0A][test_multiline]]
 [[elisp:(start-process-shell-command%20"kill%20using%20pipe%20BY%20using%20concat%20CMD!%20in%20timeout"%20nil%20(concat%20"ps%20aux"%20"|%20grep%20espeak_while;"%20"espeak%20-a%2030%20hi"))][elisp:실험용 using concat]]  ;; 성공적인 정지력!!!

;; 성공적인 수행 즉, elisp:를 넣지 않아서 오류가 발생함을 확인함.
elisp:(start-process-shell-command "espeak라틴희랍읽기" nil 
(concat "echo \"process NAME: espeak_while\";"
" string=\"" (buffer-substring-no-properties (+ (line-beginning-position 2) 6) (line-end-position 2)) "\";"
" string2=\"" (buffer-substring-no-properties (line-beginning-position 3) (line-end-position 3)) "\";"
" while true; "
" do espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 3;"
"    espeak -a 30 -g 60 -s 120 \"$string2\"; sleep 3;"
 "   espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 9;"
" done;"
))
amare me
사랑한다 진리의 나여!




(start-process-shell-command "espeak라틴희랍읽기" nil (concat "echo \"process NAME: espeak_while\";" " string=\"" (buffer-substring-no-properties (+ (line-beginning-position 2) 6) (line-end-position 2)) "\";" " string2=\"" (buffer-substring-no-properties (line-beginning-position 3) (line-end-position 3)) "\";" " while true; " " do espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 3;""    espeak -a 30 -g 60 -s 120 \"$string2\"; sleep 3;" "   espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 9;" " done;"))


(start-process-shell-command "espeak라틴희랍읽기" nil 
(concat "echo \"process NAME: espeak_while\";"
" string=\"" (buffer-substring-no-properties (+ (line-beginning-position 2) 6) (line-end-position 2)) "\";"
" string2=\"" (buffer-substring-no-properties (line-beginning-position 3) (line-end-position 3)) "\";"
" while true; "
" do espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 3;"
"    espeak -a 30 -g 60 -s 120 \"$string2\"; sleep 3;"
 "   espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 9;"
" done;"
))
amare me
사랑한다 진리의 나여!




;(concat "espeak -a 30 -v other/grc -s 100 -g 30 \" \""
(start-process-shell-command "espeak라틴희랍읽기" nil 
(concat "espeak -a 30 -s 100 -g 30 \"" 
"hi world" ;; 일단성공
"\" ; echo hi"

"echo \"process NAME: espeak_while\";"
" string=\"amare me\";"
" string2=\"사랑해 나를! \";"
" while true; "
" do espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 3;"
"    espeak -a 30 -g 60 -s 120 \"$string2\"; sleep 3;"
 "   espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 9;"
" done;"
))



echo \"process NAME: espeak_while\";
 string=\"amare me\";
 string2=\"사랑해 나를! \";
 while true; 
 do espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 3;
    espeak -a 30 -g 60 -s 120 \"$string2\"; sleep 3;
    espeak -a 30 -g 60 -s 100 -v other/la \"$string\"; sleep 9;
 done;



 sleep 3;
 done;


(buffer-substring-no-properties (line-beginning-position 0) (line-end-position 0))


1234567890 부분문장추출성공
(buffer-substring-no-properties (+ (line-beginning-position 0) 6) (line-end-position 0))


(let ((time_a_b (split-string (buffer-substring-no-properties (+ (line-beginning-position 0) 6) (line-end-position 0)))))

  strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak -a 30 -g 60 -s 100 -v other/grc "$LINE"; sleep 3; done; sleep 3 done;





;(concat "espeak -a 30 -v other/grc -s 100 -g 30 \" \""
(start-process-shell-command "espeak라틴희랍읽기" nil 
(concat "espeak -a 30 -s 100 -g 30 \"" 
"hi world" ;; 일단성공
"\"")
)

1234567890 부분문장추출성공
(buffer-substring-no-properties (+ (line-beginning-position 0) 6) (line-end-position 0))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
* gespeaker 외부로 읽는 것을 가능하게 한다
file:./gespeaker.org collect settings 
yay gespeaker
Welcome in Gespeaker

Δαρείου καὶ Παρυσάτιδος γίγνονται παῖδες δύο, 
πρεσβύτερος μὲν Ἀρταξέρξης, νεώτερος δὲ Κῦρος:


* test 



[[elisp:(call-process-region%20(line-beginning-position%200)%20(line-end-position%200)%20"espeak"%20"-v%20other/grc%20-s%20100%20-g%2030")][elisp:클릭espeak -v other/grc -s 100 -g 30 above 1line!]] 
(call-process-region (line-beginning-position 0) (line-end-position 0) "espeak")
| Ἀτρεΐδα 아트레우스의 아들       | δὲ 그리고 | μάλιστα 대부분               | δύω, 둘 | κοσμήτορε 장군들의  | λαῶν:  사람들의         |
elisp:(start-process-shell-command "espeak라틴희랍읽기" nil "espeak -v other/grc -s 100 -g 30 \"| Ἀτρεΐδα 아트레우스의 아들       | δὲ 그리고 | μάλιστα 대부분               | δύω, 둘 | κοσμήτορε 장군들의  | λαῶν:  사람들의         |\"")
[[elisp:(start-process-shell-command%20"espeak%EB%9D%BC%ED%8B%B4%ED%9D%AC%EB%9E%8D%EC%9D%BD%EA%B8%B0"%20nil%20"espeak%20-v%20other/grc%20-s%20100%20-g%2030%20\"|%20%E1%BC%88%CF%84%CF%81%CE%B5%E1%BF%93%CE%B4%CE%B1%20%EC%95%84%ED%8A%B8%EB%A0%88%EC%9A%B0%EC%8A%A4%EC%9D%98%20%EC%95%84%EB%93%A4%20%20%20%20%20%20%20|%20%CE%B4%E1%BD%B2%20%EA%B7%B8%EB%A6%AC%EA%B3%A0%20|%20%CE%BC%E1%BD%B1%CE%BB%CE%B9%CF%83%CF%84%CE%B1%20%EB%8C%80%EB%B6%80%EB%B6%84%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20|%20%CE%B4%E1%BD%BB%CF%89,%20%EB%91%98%20|%20%CE%BA%CE%BF%CF%83%CE%BC%E1%BD%B5%CF%84%CE%BF%CF%81%CE%B5%20%EC%9E%A5%EA%B5%B0%EB%93%A4%EC%9D%98%20%20|%20%CE%BB%CE%B1%E1%BF%B6%CE%BD:%20%20%EC%82%AC%EB%9E%8C%EB%93%A4%EC%9D%98%20%20%20%20%20%20%20%20%20|\"")][호머일리아드1]]
*  M-| 에 붙여서 실행되는 읽기 반복의 region 문장이다.
시행착오를 거치며 완성된 영역선택에서 읽기를 실행하는 문장임( GREAT!!! )
  strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak -g 60 -s 100 -v other/grc "$LINE"; sleep 3; done; sleep 3 done
                ;; 단문으로 만드는 것은 시행착오를 거치면서 완성되는 것이다. espeak -g 60 -s 100 -v other/grc /la를 실행
                ;; C-x ESC ESC	repeat-complex-command
./app/emacs/kmacro.org:13:C-x ESC ESC	repeat-complex-command
./app/emacs/kmacro.org:14:C-x M-:		repeat-complex-command
./app/emacs/kmacro.org:12:C-x z		repeat
./app/emacs/kmacro.org:15:C-x C-[ C-[	repeat-complex-command (리턴!C-m)

-a <integer>
	   Amplitude, 0 to 200, default is 100


(start-process-shell-command "timeout 15m mpv Homer Iliad" nil "
timeout 15m mpv --player-operation-mode=pseudo-gui ~/Music/homer_rhythm/iliad01/line_010.mp4
")
strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak "$LINE"; sleep 3; done; done

(start-process-shell-command "while true espeak greek latin" nil "
strings=\"
hi
world
        \"; while true; do echo \"$strings\" | while read LINE ; do espeak -a 20 \"$LINE\"; sleep 3; done; done
")


#+BEGIN_SRC elisp
;# while true 무한반복의 실행! 나중에 for문의 횟수사용 (timeout의 방법을 찾기전에 모색이었으나 timeout bash -c도 나중에 성공함!)
(start-process-shell-command "while true espeak greek latin" nil "strings=\"\
반갑습니다 
아리스토텔레스 나무 대방광불화엄경
\"; while true; echo \"elisp_espeak\"; do echo \"$strings\" | while read LINE ; do espeak -a 20 \"$LINE\"; sleep 3; done; done")


(start-process-shell-command "while true 'elisp_espeak' 키워드로 찾아서 ps aux kill" nil
"ps aux | grep elisp_espeak | awk '{print $2}' | xargs -I{} kill -9 {}")
;; M-! ps aux | grep "키워드 (by echo)" | awk '{print $2}' | xargs -I{} kill -9 {}
#+END_SRC


(start-process-shell-command "killall espeak while" nil "
timeout 15m mpv --player-operation-mode=pseudo-gui ~/Music/homer_rhythm/iliad01/line_010.mp4
")

######;;;;-*- coding: utf-8 -*-

*** 좀더 간단한 것은 영역을 선택후
M-| espeak -a 30 -s 100
그외 더 개량하고 수집할 것.

*** macosx의 say CMD를 활용하는 것은 선명한 음질을 얻기 위함이다.
그래서 eshell에서 맥으로 터널연결한 다음 거기서 이맥스를 열고 또는 문장을 전달받을 곳을 만들고 문장을 전송한다.eshell을 참조할 것
* 

[2020-02-12 Wed 14:45] espeak -g 60 -s 100 -v other/grc /la를 실행하는 것으로 각 문서의 시작부분에 둔다
./app/emacs/kmacro.org:13:C-x ESC ESC	repeat-complex-command
./app/emacs/kmacro.org:14:C-x M-:		repeat-complex-command
./app/emacs/kmacro.org:12:C-x z		repeat
./app/emacs/kmacro.org:15:C-x C-[ C-[	repeat-complex-command (리턴!C-m)
M-|(M-Shift-\) espeak -g 60 -s 100 -v other/grc {region을 읽어들이는 것임!} 
cat | while read LINE; do espeak "$LINE"; sleep 3; done
cat | while read LINE; do while true ; do espeak "$LINE"; sleep 3; done; done
[2020-02-12 Wed 14:45] 
espeak -g 60 -s 100 -v other/grc /la를 실행하는 것으로 각 문서의 시작부분에 둔다

cat | while true; do while read LINE ; do espeak "$LINE"; sleep 3; done; done
 not good;; strings="$( cat )" while true; do echo "$strings" | while read LINE ; do espeak "$LINE"; sleep 3; done; done
         ;; 이유는 간단하게도 ;를 추가한 아래의 문장에서 간단히 해결되었다.
strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak "$LINE"; sleep 3; done; done
                ;; 단문으로 만드는 것은 시행착오를 거치면서 완성되는 것이다.

espeak "$(xclip -o)" # dmenu_run in CMD+d
영역선택후에 실행하면 잘 된다.
hello 
world
good
strings="$( cat )"; while true; do echo "$strings" | while read LINE ; do espeak "$LINE"; sleep 3; done; done

#+BEGIN_SRC sh
while true
do
espeak -v other/grc "$(xclip -o )"
sleep 3
done
#+END_SRC
(find-file-other-window "../../language_computer/shell/syntax_of_while_in_sh.org")

# cf trans-in-google
# FreeBSD korean resource from arch 
[[*korean][/app/espeak/readme.org*korean]]

$ cat | while espeak 터미널에서 듣기 연습을 발견함!!! >> 
$ generate mp3 file from espeak
[[./practice_model_espeak.org]] << 실행문 모음.
* src_header_var
#+NAME: quote_reading1
#+begin_quote sh
echo hi  주석문이다
echo hi2 ;;emacs/src_variable.org espeak/readme.org
#+end_quote

#+header: :var reading1="echo REARRANGE sentence using M-S-up/down arrow" 
#+header: :var x=1 
#+header: :var reading1=quote_reading1 
#+begin_src sh
for i in 1 2 3
do
espeak -a 20 "$reading1"
done
#+end_src

* espeak INDEX


* A-Z

** arco 
(find-file "~/espeak/") 더욱 연마하는 폴더임.

** english # 문장의 전달에 사용할 수 있는 방법으로 지정할 것.

#+NAME: test_txt
#+BEGIN_EXAMPLE
Type 
  t 
#+END_EXAMPLE


#+BEGIN_SRC sh :var a1=test_square(6) t=test_txt
echo "test_square $a1 헤더값으로 ()변수 기본값을 지정할 수 있었음에도 유의"
  echo "test_txt $t $함수의 기본을 정의한다."
#+END_SRC

#+RESULTS:
| 36   |
| Type |
| t    |
|      |

#+name: test_square
#+header: :var x=0
#+begin_src python
return x*x
#+end_src


** generate mp3 file from espeak
출처: https://askubuntu.com/questions/178736/generate-mp3-file-from-espeak#178768
espeak -f myfile --stdout | ffmpeg -i - -ar 44100 -ac 2 -ab 192k -f mp3 final.mp3
espeak -f foo.txt -w foo.wav
** greek

hello world
good day to you


** korean
./resource/korean/ko_dict saved from /home/thinkpad/.cache/yay/espeak-test/src/espeak-1.48.15/espeak-data/ in Arco
./resource/korean/ko_list|rules from /home/thinkpad/.cache/yay/espeak-test/src/espeak-1.48.15/dictsource
** latin

** terminal
#+BEGIN_SRC sh
### 중요한 각종 언어듣기학습의 도구
# 한줄씩 또는 여러줄씩 중간마우스 클릭으로 웹의 문장을 읽어내는 것이 가능한 학습의 도구.
$ cat | while read LINE; do espeak "$LINE"; done
		# 출처에서 활용된 것임 dwm_arch_wiki
		$ conky | while read LINE; do xsetroot -name "$LINE"; done
#+END_SRC

#+BEGIN_SRC sh :results silent
#ls | (while read LINE ; do espeak "$LINE";sleep 1; done)
a="Deep in your innermost being, you’ve always known you were destined to learn Clojure.
Every time you held "
a="$(xclip -o)"
echo "$a" | while read LINE ; do espeak "$LINE";sleep 3; done
#+END_SRC

#+RESULTS:

terminal use 문장 한줄단위로 interactive하게 낭독하는 기능!!! $ say -i #macosx와 유사함.
:results silent
EOF

#+RESULTS:




#+RESULTS:

?? 궁금증 ?? 한줄 낭독과 다음 낭독을 파일 출력하면 어떻게 되는 것인가. 시간을 두고 읽는가 아니면...


** okular espeak not work 해결책은??? 아직 모색중이다.

Description:
There are two submenus in the Tools menu called "Speak Whole Document" and "Speak Current Page", they are not working without "speech-dispatcher" and "espeak-ng" so I suggest adding them as an optional dependency to the package.

Additional info:
* package version(s)
okular 19.04.1-1
espeak-ng 1.49.2-6
speech-dispatcher 0.9.1-1 다운로드해두 잘 안됨. 이전에 FreeBSD에서 해결한 것 같은데...
6 aur/espeak-ng-git 0.0-1 (+10 0.00%) (Installed: 1.49.2.r1099.fe7aa874-1)
9 aur/gespeaker-git 0.8.2.4.g236462d-2 (+ 2 0.00%) 
    A GTK+ frontend for espeak and mbrola to speech the read text
4 community/gst-plugins-espeak 0.5.0-2 (11.8 KiB 34.0 KiB) 
    Use espeak as a sound source for gstreamer

10 aur/jasper-tts-espeak 0.0.0-1 (+1 0.00%) 
    Meta package to satisfy dependencies for Jasper's espeak TTS engine.
9 aur/gespeaker-git 0.8.2.4.g236462d-2 (+ 2 0.00%) 
    A GTK+ frontend for espeak and mbrola to speech the read text.

