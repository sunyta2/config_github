


2칼럼으로 분리한 것에서 tmux와 유사하게 명령을 전송함.
한 쪽의 명령을 다른 쪽으로 보내는 것을 맥에 저장된 것을 추가할 것


* 키스트로크전달
#+BEGIN_SRC emacs-lisp
(call-process "echo" nil "*scratch*" nil "hi\n\n\n world\n\n")
(call-process "echo" nil "*eshell*" nil "hi\n\n\n world\n\n")

(call-process "echo" nil "*eshell*" nil "hi\n\n\n world\n한글이 나온다는 것으로 전송을 증명함\n") ;; eshell로 명령을 전송할 수 있다.
; 명령을 직접으로 키-스크로크를 전달하는 것으로 사용함.
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (process-send-region "guesuser@productionServerShellSession" beg end)
(defun my-send (beg end)
  (interactive "r")
  (process-send-region "*eshell*" beg end))
k ; 옆의 문자를 선택해서 전송해야 하지만 알아 둘 것.

(process-send-string PROCESS STRING)
(process-send-string "*eshell*" "k") ;멋지게 스트로크를 mpv로 전달!
(comint-send-string "*eshell*" "k")
(term-send-string "*terminal*" "hi") ; 3번째인데 term만 가능할 것임.
(python-shell-send-string "; print()")) ;; python에서 문장을 전송하는 법


; (comint-send-string "*shell*" "COMMAND\n") 
where the first argument is the name of the running process; 
or, a user can omit the \n and then follow comint-send-string with comint-send-input
(comint-send-input "*eshell*" "k")
#+END_SRC
(term-send-string PROC STR)
(term-send-string "*terminal*" "hi") ; 3번째인데 term만 가능할 것임.

* mpv 구간 반복의 프로세스를 만들어 완성하고 시도할 것.
- 전제: 멀티텀의 설치할 것.

- 멀티터미널을 한가지를 다른 창에 실행함.
- 액티베이트하든지 만든지 일단 버퍼이름을 얻어냄
- 원하는 명령을 스트로크로 전달함.
- 원래의 노트로 자리 복귀함.

- 아이노드번호를 사용하면 매우 유동적인 파일위치 변경이 가능할 것이다.
	- 아이노드 번호 얻기의 방법을 만들어 파일로 정리할 것.
	- mpv의 반복구간 실행을 찾아 둘 것. 

