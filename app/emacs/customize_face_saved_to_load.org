(org-babel-load-file (expand-file-name "~/.emacs.d/somefolder/in_there_/myinit.org"))
(shell-command "ln -fs ~/config_github/app/emacs/customize_face_saved_to_load.org ~/config_github/app/emacs/shell_emacs/customize_face_saved_to_load.org")
file~/config_github/app/emacs/shell_emacs/
file:~/config_github/app/emacs/shell_emacs/
→ {emacq.el에 붙여서 실행할 문장임}(org-babel-load-file (expand-file-name "~/config_github/app/emacs/shell_emacs/customize_face_saved_to_load.org"))
customize_face_saved_to_load.org
test
 ; (:height 0.9 :foreground "orange red" :background "pale green" :inherit

(custom-set-faces
'(org-level-2
((t
 (:height 0.9 :foreground "Blue" :background "pale green" :inherit
	   (org-level-1))))
)

'(org-level-3
((t
  (:width condensed :height 1.5 :weight extra-bold :slant oblique :overline "lawn green" :box
	  (:line-width 2 :color "aquamarine" :style pressed-button)
	  :distant-foreground "magenta" :background "navajo white" :inherit
	  (outline-3))))
)
)
#+BEGIN_quote emacs-lisp






(+ 1 2)

(message "hi" 'world is good)


(+ 1 "123")

gray9

midnight blue
dark green
dark blue good!

dark slate gray

정성을 들인 글씨처럼 중요한 것은 없을 것이다. 생각을 명확히 정의한다.

cornsilk


asdfasd asd fe asif\


if make if gpoosigl elw ineth woa







#+END_quote

#+BEGIN_SRC C
aasd
asdfasdf if with good in the way of thought



asdfasdfasdf
#+END_SRC

     (setq org-src-block-faces '(
                                 ("emacs-lisp" (:background "gray9"))
				 ("sh" (:background "midnight blue"))
				 ("python" (:background "OliveDrab1"))
                                 ("C" (:background "Darkolivegreen1"))
                                 ("rust" (:background "LightBlue"))
				 ("text" (:background "snow1"))
                                 ;("" (:background "LightBlue"))
				 ;("python" (:background "#E5FFB8"))
                                 ;;("emacs-lisp" (:background "#EEE2FF"))
				 ;;("emacs-lisp" (:background "PaleTurquoise1"))
                                ))

#+BEGIN_SRC rust
sdfasd
asdf echo "hi" world in good for a=3 


asdf




#+END_SRC


#+BEGIN_SRC python :results table
print ("a")
#+END_SRC

#+RESULTS:
| None |
None
None
None
None

** ㅅㄷㄴㅅ
:PROPERTIES:
:Effort:   1:00
:END:
:LOGBOOK:
CLOCK: [2020-03-26 Thu 12:16] -- [2020-04-13 Mon 11:15]
CLOCK: [2020-03-22 Sun 08:33]--[2020-03-22 Sun 08:37] =>  0:04
:END:

- 0:00:00 :: 
연습을 하는 것이 중요한 실천이다. 

- 46:30:35 :: 
ana뭄너슬ㅈㅇ확히 실천하는 벙칙을 만들어 간다. 분절성의; 인실긍ㄹ 가지고 언어르ㅡ 터치하는 습관을 기른다.
연습의 중요성으익힌다.
결심을 내리는 과정을 투명하고 창의 적으로 시행한다.연습의 중요나 부분을  명확히 한다.
결심을 분명히 굳히는 과정을 명확히 만들어 간다. 연습


                                               :test_123_내용점검의_필요성:                  
 asdfa


#+BEGIN_SRC text


sdfasd



asdf echo "hi" world in good for a=3 
asdfjatjfjwjdghkrl gjwflqkgms rjtld vlftnwjdls ydthrk ehlsm srjtdlek.

asdf

#+END_SRC

#+begin_src sh
echo hi


#+end_src

#+RESULTS:
: hi

                                                        :END:                                 
ㅁㄴㅇㄹㅁㅇㄴㄹㅁㄴㅇ

#+RESULTS:
: hi



#+begin_example text
  dksnwjdmdmwjdghlr예시르 정확히 들어서 문맥을 장악한다.
  if sdjwkd wkd eks 
  if for
  defun{

  " "
  }

  echo hi

  "test" = 3 goodn in teh way

#+end_example

#+begin_quote elisp



#+end_quote

#+begin_quote elisp


  (print "hi")
  (princ


   delete function*

   (delete-and-extract-region START END) ;; 함수의 시작점과 끝점을 알아내는 함수를 발견하면됨
   그리고 let에 그값을 저장하고
   eval-la

 
   (+ 1 2 "l")
   " pring "
   (pwd
  Debugger entered--Lisp error: (void-variable pwd)
    eval(pwd nil)
    elisp--eval-last-sexp(nil)
    eval-last-sexp(nil)
    funcall-interactively(eval-last-sexp nil)
    call-interactively(eval-last-sexp nil nil)
    command-execute(eval-last-sexp)

    )

 
   (substr
  (setq buffer 

  (setq
  global-mode-string

  '(
""
    org-timer-mode-line-string
    "화두확실"
    display-time-string
    battery-mode-line-string
    timeclock-mode-string
  )
  )


#+end_quote
- 0:00:00 :: 

#+BEGIN_SRC sh
sdfasd
asdf echo "hi" world in good for a=3 


asdf

#+END_SRC

- 0:30:36 ::
- 0:30:34 ::
- 0:30:33 ::
- 0:30:32 :: 0:30:10 
*  일단 분할하는 것부터

** Mode Line 수집

#+BEGIN_SRC emacs-lisp
     (custom-set-faces
     '(mode-line 
  ((t
    (:weight bold :slant italic :box
             (:line-width 2 :color "red" :style released-button)
             :foreground "medium blue" :background "gold")))

       ((t
    (:height 1.1 :weight bold :slant italic :box
             (:line-width 3 :color "red" :style released-button)
             :foreground "medium blue" :background "gray")))
      )

     '(mode-line-buffer-id
  ((t
    (:weight bold :slant italic :box
             (:line-width 2 :color "dark blue" :style nil)
             :foreground "dark green")))
      )
     '(mode-line-inactive   
  ((t
    (:weight light :box
             (:line-width -1 :color "grey75" :style nil)
             :foreground "grey20" :background "grey90")))
         )
    )

#+END_SRC

#+RESULTS:

;;     ((t
;;     (:weight bold :slant italic :box
;;             (:line-width 3 :color "olive drab" :style released-button)
;;             :foreground "dark blue")))
   ;;  ((t
   ;;   (:weight bold :slant normal :box
   ;;            (:line-width 3 :color "grey75" :style released-button)
   ;;            :foreground "dark blue")))
   ;;  )
   ;;nn ;

;;    ((t
;;     (:weight light :box
;;             (:line-width -1 :color "grey75" :style nil)
;;             :foreground "grey20" :background "grey90")))


** Minibuffer 수집
#+BEGIN_SRC emacs-lisp
(custom-set-faces

'(minibuffer-prompt
((t
  (:weight bold :overline "magenta" :foreground "medium blue" :background "yellow")))
)

)
#+END_SRC
** Dired 수집
#+BEGIN_SRC emacs-lisp
(custom-set-faces

'(dired-directory
((t
  (:box
   (:line-width 3 :color "DarkGreen" :style released-button)
   :background "DarkOliveGreen1" :inherit
   (font-lock-function-name-face))))
)



'(dired-header
((t
  (:weight bold :box
	   (:line-width -1 :color "black" :style nil)
	   :inherit
	   (font-lock-type-face))))
)

'(dired-symlink
((t
  (:underline
   (:color foreground-color :style wave)
   :foreground "darkgreen" :inherit
   (font-lock-keyword-face))))
)

)


#+END_SRC
**  Org 수집
#+BEGIN_SRC emacs-lisp
(custom-set-faces


'(org-block
((t
  (:background "#f850f850f850" :inherit
	       (shadow))))
)

'(org-block-begin-line
((t
  (:height 1.2 :box
	   (:line-width 2 :color "darkgreen" :style released-button)
	   :foreground "medium blue" :background "white smoke")))
)

'(org-block-end-line
((t
  (:box
   (:line-width 2 :color "darkgreen" :style released-button)
   :foreground "darkred" :background "white smoke" :inherit
   (org-block-begin-line))))
)

'(org-checkbox
((t
  (:box
   (:line-width 2 :color "deep pink" :style released-button)
   :background "mint cream")))
)

'(org-checkbox-statistics-todo
((t
  (:inherit
   (org-todo))))
)

'(org-code
((t
  (:background "light salmon")))
)

'(org-date
((t
  (:underline
   (:color foreground-color :style line)
   :foreground "medium blue")))
)

'(org-default
((t
  (:height 1.2 :foreground "dark green" :inherit
	   (default))))
)

;org-document-info   ; 재설정을 검토할 것.

'(org-document-info-keyword
((t
  (:height 1.2 :box
	   (:line-width 2 :color "grey75" :style pressed-button)
	   :background "azure1")))
)

'(org-document-title
((t
  (:height 1.5 :weight bold :overline "gold" :box
	   (:line-width 2 :color "grey75" :style released-button)
	   :foreground "midnight blue" :background "OliveDrab1")))
)

'(org-drawer
((t
  (:box
   (:line-width 2 :color "grey75" :style released-button)
   :foreground "Blue1" :background "wheat")))
)


'(org-ellipsis
((t
  (:height 1.2 :underline
	   (:color foreground-color :style wave)
	   :box
	   (:line-width 3 :color "magenta" :style released-button)
	   :foreground "magenta" :background "light yellow")))
)



;org-fontify-quote-and-verse-blocks: t


'(org-hide
((((background light))
  (:foreground "white"))
 (((background dark))
  (:foreground "black")))
)

'(org-indent
((t
  (:underline nil :foreground "white smoke" :background "azure1" :inherit
	      (org-hide))))
)


'(org-level-1
((t
  (:height 1.8 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :background "light steel blue")))
)

'(org-level-2
((t
  (:height 1.7 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :foreground "orange red" :background "pale green")))
)

'(org-level-3
((t
  (:height 1.6 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :background "light steel blue")))
)

'(org-level-4
((t
  (:height 1.5 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :foreground "magenta" :background "medium spring green")))
)

'(org-level-5
((t
  (:height 1.4 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :foreground "dark green" :background "wheat")))
)

'(org-level-6
((t
  (:height 1.3 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :foreground "orange" :background "dark green")))
)

'(org-level-7
((t
  (:height 1.2 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :background "light steel blue")))
)

'(org-level-8
((t
  (:height 1.1 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :foreground "orange red" :background "pale green")))
)

'(org-link
((t
  (:inherit
   (link))))
)

'(org-list-dt
((t
  (:height 1.1 :weight bold :background "light cyan")))
)

'(org-meta-line
((t
  (:height 1.15 :box
	   (:line-width 2 :color "grey75" :style released-button)
	   :background "LightGoldenrod" :inherit
	   (font-lock-comment-face))))
)

'(org-mode-line-clock
((t
  (:weight normal :underline
	   (:color "light gray" :style wave)
	   :box
	   (:line-width 2 :color "red" :style released-button)
	   :background "gold" :inherit
	   (mode-line))))
)

'(org-mode-line-clock-overrun
((t
  (:height 1.1 :weight bold :box
	   (:line-width 2 :color "red" :style released-button)
	   :background "green" :inherit
	   (mode-line))))
)

'(org-property-value
((t
  (:foreground "medium blue" :background "AntiqueWhite2")))
)

'(org-quote
((t
  (:background "lawn green" :inherit
	       (org-block))))
)

'(org-special-keyword
((t
  (:box
   (:line-width 1 :color "blue" :style released-button)
   :background "yellow" :inherit
   (font-lock-keyword-face))))
)

'(org-table
((t
  (:box
   (:line-width 2 :color "grey75" :style released-button)
   :foreground "Blue1" :background "DarkOliveGreen1")))
)

'(org-todo
((t
  (:weight bold :box
	   (:line-width 3 :color "medium blue" :style released-button)
	   :foreground "green" :background "cornsilk")))
)

'(org-verse
((t
  (:background "light goldenrod")))
)

'(org-warning
((t
  (:height 1.2 :weight bold :box
	   (:line-width 2 :color "grey75" :style released-button)
	   :foreground "medium blue" :background "tomato1")))
)
'(help-argument-name
((t
  (:weight semi-bold :background "wheat" :inherit
	   (italic))))
)


'(region
((t
  (:underline
   (:color "red" :style wave)
   :distant-foreground "gtk_selection_fg_color" :background "grey75")))
)

'(term-bold-face
((t
  (:weight semi-bold :box
	   (:line-width 1 :color "grey75" :style released-button))))
)

'(term
((t
  (:foreground "medium blue" :inherit
	       (default))))
)

'(dired-subtree-depth-1
((t nil))
)

'(dired-subtree-depth-2
((t nil))
)

'(dired-subtree-depth-3
((t nil))
)

'(dired-subtree-depth-4
((t nil))
)

'(dired-subtree-depth-5
((t nil))
)

'(dired-subtree-depth-6
((t nil))
)

'(show-paren-match 
((t
  (:box
   (:line-width 2 :color "blue" :style released-button))))
)

'(show-paren-match-expression
((t
  (:box
   (:line-width 2 :color "green" :style released-button))))
)



'(show-paren-mismatch
((t
  (:box
   (:line-width 2 :color "purple" :style released-button))))
)


)
#+END_SRC
*** backup list
#+BEGIN_text emacs-lisp :backupforbroke
(custom-set-faces


'(org-block
((t
  (:background "#f850f8" :inherit
	       (shadow))))
)

'(org-block-begin-line
((t
  (:height 1.2 :box
	   (:line-width 2 :color "darkgreen" :style released-button)
	   :foreground "medium blue" :background "white smoke")))
)

'(org-block-end-line
((t
  (:box
   (:line-width 2 :color "darkgreen" :style released-button)
   :foreground "darkred" :background "white smoke" :inherit
   (org-block-begin-line))))
)

'(org-checkbox
((t
  (:box
   (:line-width 2 :color "deep pink" :style released-button)
   :background "mint cream")))
)

'(org-checkbox-statistics-todo
((t
  (:inherit
   (org-todo))))
)

'(org-code
((t
  (:background "light salmon")))
)

'(org-date
((t
  (:underline
   (:color foreground-color :style line)
   :foreground "medium blue")))
)

'(org-default
((t
  (:height 1.2 :foreground "dark green" :inherit
	   (default))))
)

;org-document-info   ; 재설정을 검토할 것.

'(org-document-info-keyword
((t
  (:height 1.2 :box
	   (:line-width 2 :color "grey75" :style pressed-button)
	   :background "azure1")))
)

'(org-document-title
((t
  (:height 1.5 :weight bold :overline "gold" :box
	   (:line-width 2 :color "grey75" :style released-button)
	   :foreground "midnight blue" :background "OliveDrab1")))
)

'(org-drawer
((t
  (:box
   (:line-width 2 :color "grey75" :style released-button)
   :foreground "Blue1" :background "wheat")))
)


'(org-ellipsis
((t
  (:height 1.2 :underline
	   (:color foreground-color :style wave)
	   :box
	   (:line-width 3 :color "magenta" :style released-button)
	   :foreground "magenta" :background "light yellow")))
)



;org-fontify-quote-and-verse-blocks: t


'(org-hide
((((background light))
  (:foreground "white"))
 (((background dark))
  (:foreground "black")))
)

'(org-indent
((t
  (:underline nil :foreground "white smoke" :background "azure1" :inherit
	      (org-hide))))
)


'(org-level-1
((t
  (:height 1.8 :box
	   (:line-width 2 :color "deep sky blue" :style released-button)
	   :background "light steel blue" :inherit
	   (outline-1))))
)

'(org-level-2
((t
  (:height 0.9 :foreground "orange red" :background "pale green" :inherit
	   (org-level-1))))
)

'(org-level-3
((t
  (:width condensed :height 1.5 :weight extra-bold :slant oblique :overline "lawn green" :box
	  (:line-width 2 :color "aquamarine" :style pressed-button)
	  :distant-foreground "magenta" :background "navajo white" :inherit
	  (outline-3))))
)

'(org-level-4
((t
  (:inherit
   (outline-4))))
)

'(org-level-5
((t
  (:inherit
   (outline-5))))
)

'(org-level-6
((t
  (:inherit
   (outline-6))))
)

'(org-level-7
((t
  (:inherit
   (outline-7))))
)

'(org-level-8
((t
  (:inherit
   (outline-8))))
)

'(org-link
((t
  (:inherit
   (link))))
)

'(org-list-dt
((t
  (:height 1.1 :weight bold :background "light cyan")))
)

'(org-meta-line
((t
  (:height 1.15 :box
	   (:line-width 2 :color "grey75" :style released-button)
	   :background "LightGoldenrod" :inherit
	   (font-lock-comment-face))))
)

'(org-mode-line-clock
((t
  (:weight normal :underline
	   (:color "light gray" :style wave)
	   :box
	   (:line-width 2 :color "red" :style released-button)
	   :background "gold" :inherit
	   (mode-line))))
)

'(org-mode-line-clock-overrun
((t
  (:height 1.1 :weight bold :box
	   (:line-width 2 :color "red" :style released-button)
	   :background "green" :inherit
	   (mode-line))))
)

'(org-property-value
((t
  (:foreground "medium blue" :background "AntiqueWhite2")))
)

'(org-quote
((t
  (:background "lawn green" :inherit
	       (org-block))))
)

'(org-special-keyword
((t
  (:box
   (:line-width 1 :color "blue" :style released-button)
   :background "yellow" :inherit
   (font-lock-keyword-face))))
)

'(org-table
((t
  (:box
   (:line-width 2 :color "grey75" :style released-button)
   :foreground "Blue1" :background "DarkOliveGreen1")))
)

'(org-todo
((t
  (:weight bold :box
	   (:line-width 3 :color "medium blue" :style released-button)
	   :foreground "green" :background "cornsilk")))
)

'(org-verse
((t
  (:background "light goldenrod")))
)

'(org-warning
((t
  (:height 1.2 :weight bold :box
	   (:line-width 2 :color "grey75" :style released-button)
	   :foreground "medium blue" :background "tomato1")))
)


)
#+END_text
