#+STARTUP: showeverything
#+TITLE: search_find_grep_emacs.org 파일검색
#+CREATOR: LEEJEONGPYO




일단 M-x locate로 파일명 검색보다는 M-x find-name-dired *검색어*
M-x find-name-dired *검색어* 과 M-x rgrep을 사용하는 것이 유용하다.-정보장악력이 안정된 의사결정을 가능하게 한다.

*** TODO multi-isearch-files multi-occur
help:multi-isearch-files help:multi-occur
       버퍼내의 검색전용    help:multi-occur-in-matching-buffers


* [find-name-dired] M-x 
#+STARTUP: showall
(buffer-file-name)"/home/thinkpad/config_github/app/emacs/search_find_grep_emacs.org"
(find-file-other-window "/home/thinkpad/config_github/app/emacs/search_find_grep_emacs.org")
#이곳을 검색의 중심지로 사용한다.

    M-x find-name-dired *apf* # 파일이름으로 검색하기
    M-x find-dired -name \*apf\* # cmd_type{위와 매우 유사}
_   M-x locate 좋은 명령이다.
      (find-grep-dired "~/config_github/app/emacs" "*emacs-lisp*")
(rgrep REGEXP &optional FILES DIR CONFIRM)
      (rgrep "이름" "*.org" "~/config_github/app/shell")
      (rgrep "기회" "*.org" "~/config_github")
      (rgrep "*emacs-lisp" "*.org" "~/config_github/app/shell")
* {linage} * super -> ** side -> *** stuff
* [1_super_1]: 검색의 효과적인 실행
- /great_books/meta_thought.org
** [2_side_2]: idea_practice: ./test_reading_stuff.org ./test_stuff/
       - side, /vim/readme.org
*** [3_stuff_3]: simple_practice, dividen_note_making, etc. question? test develop
        - ./test_stuff/
#+BEGIN_SRC emacs-lisp
(find-file-other-window "./test_stuff/readme.org")
#+END_SRC


* 검색의 핵심은 find-grep과 find-dired
    - 추가 locate 와 find-name-dired

** locate
      (locate SEARCH-STRING &optional FILTER ARG)

** find-name-dired
      (find-name-dired DIR PATTERN)
PATTERN is a shell wildcard (not an Emacs regexp) and need not be quoted.
The default command run (after changing into DIR) is
    find . -name 'PATTERN' -ls
      
** find-dired
      (find-dired DIR ARGS)
Run ‘find’ and go into Dired mode on a buffer of the output.
The command run (after changing into DIR) is essentially
      find . \( ARGS \) -ls




** find-grep-dired
      (find-grep-dired DIR REGEXP)
      (find-grep-dired "~/config_github" "*핵심*")
      (find-grep-dired "~/config_github/app/shell" "*emacs-lisp*")

      (find-grep-dired "~/config_github/language_computer/shell" " while ")
  /home/thinkpad/config_github/language_computer/shell/:
  find . \( -type f -exec grep -q -e while \{\} \; \) -ls
    3282977      4 -rw-r--r--   1 thinkpad thinkpad      859 Feb 12 17:53 syntax_of_while_in_sh.org
    3282980      4 -rw-r--r--   1 thinkpad thinkpad     3222 Feb 12 18:15 syntax_of_variable_in_sh.org
  find finished at Thu Feb 13 23:22:04



Find files in DIR that contain matches for REGEXP and start Dired on output.
The command run (after changing into DIR) is
  find . \( -type f -exec ‘grep-program’ ‘find-grep-options’ \
    -e REGEXP {} \; \) -ls

  /home/thinkpad/config_github/app/emacs/:
  find . \( -type f -exec grep -q -e \*comm\* \{\} \; \) -ls
  find finished at Thu Feb 13 23:13:36




(find-grep "find ~/config_github -type f -exec grep --color -nH --null -e gentoo \{\} +")
(find-dired "~/config_github" "-type f -exec grep -q -e gentoo \{\} +")

(find-grep "find ~/config_github -type f -iname \"*emacs.org\" -exec grep --color -nH --null -e gentoo \{\} +")
(find-dired "~/config_github" "-type f -iname \"*org\" -exec grep -q -e gentoo \{\} +")



* rgrep lgrep과 grep , grep-find
** rgrep
(rgrep "*gentoo*" "*.org" "~/config_github" 1)

(rgrep "find" "*.org" "~/config_github" 1)
(lgrep "find" "*.org" "~/config_github" 1)
(rgrep "find" "*.org" "~/config_github" t)
(lgrep "find" "*.org" "~/config_github" t)

 ; diary와 함께 사용할 전형적인 실행의 문장 ; 아래의 문장 둘
(rgrep "단어_들" "*.org" "~/config_github/app" nil)
(find-grep "find ~/config_github/app -type f -exec grep --color -nH --null -e 단어_들 \{\} +")


(rgrep REGEXP &optional FILES DIR CONFIRM)
(rgrep REGEXP &optional FILES DIR CONFIRM)

** lgrep
(lgrep REGEXP &optional FILES DIR CONFIRM)
With C-u prefix, you can edit the constructed shell command line
before it is executed.
With two C-u prefixes, directly edit and run ‘grep-command’.


** grep-find




* 검색과 파일 내용 검색의 방법과 함수를 일단 수집 정리한다.

 grep -i -nH -e "eshell/" *.el | grep -v defun
 M-x grep -n -e setq ~/.emacs
grep -i --color -nH "grep" *.org

* dired-x-bind-find-file와 dired-x-find-file와 dired-x-find-file-other-window

* 커서아래바로검색을 찾아서 , 
[search - Searching for marked (selected) text in Emacs - Stack Overflow](https://stackoverflow.com/questions/202803/searching-for-marked-selected-text-in-emacs#203026)
Another option I use quite often is C-s C-w to search for the word after the current mark. Hitting C-w repeatedly increases the search with additional words 
(e.g., C-s C-w C-w C-w searches for the 3 words after the current mark).
Similarly, C-s M-s C-e searches for the rest of the line after the current mark and C-s C-M-y searches for the character after the mark. These are both repeatable in the same way (the former by somewhat-awkwardly repeating M-s C-e after C-s).


Likewise, C-r C-w searches backward ("r" = reverse) for the word after the mark. And C-r C-w C-w searches backward for the two words after the mark. – dougkramer Feb 5 '15 at 7:44 
4
This should be the accepted answer. – Bogdan Calmac Jun 25 '16 at 19:15
1
The function C-s C-y used to be bound to is now bound to C-s M-s C-e (since Emacs 24.1)



* rgrep lgrep
rgrep is an interactive autoloaded compiled Lisp function in
‘grep.el’.

(rgrep REGEXP &optional FILES DIR CONFIRM)

Recursively grep for REGEXP in FILES in directory tree rooted at DIR.
The search is limited to file names matching shell pattern FILES.
FILES may use abbreviations defined in ‘grep-files-aliases’, e.g.
entering ‘ch’ is equivalent to ‘*.[ch]’.  As whitespace triggers
completion when entering a pattern, including it requires
quoting, e.g. ‘C-q<space>’.

With C-u prefix, you can edit the constructed shell command line
before it is executed.
With two C-u prefixes, directly edit and run ‘grep-find-command’.

Collect output in a buffer.  While the recursive grep is running,
you can use C-x ` (M-x next-error), or RET in the grep output buffer,
to visit the lines where matches were found.  To kill the job
before it finishes, type C-c C-k.

This command shares argument histories with M-x lgrep and M-x grep-find.

When called programmatically and FILES is nil, REGEXP is expected
to specify a command to run.

[back]	[forward]



lgrep is an interactive autoloaded compiled Lisp function in
‘grep.el’.

(lgrep REGEXP &optional FILES DIR CONFIRM)

Run grep, searching for REGEXP in FILES in directory DIR.
The search is limited to file names matching shell pattern FILES.
FILES may use abbreviations defined in ‘grep-files-aliases’, e.g.
entering ‘ch’ is equivalent to ‘*.[ch]’.  As whitespace triggers
completion when entering a pattern, including it requires
quoting, e.g. ‘C-q<space>’.

With C-u prefix, you can edit the constructed shell command line
before it is executed.
With two C-u prefixes, directly edit and run ‘grep-command’.

Collect output in a buffer.  While grep runs asynchronously, you
can use C-x ` (M-x next-error), or RET in the grep output buffer,
to go to the lines where grep found matches.

This command shares argument histories with M-x rgrep and M-x grep.

[back]


* 수집함.

[linux - How can I recursively find all files in current and subfolders based on wildcard matching? - Stack Overflow](https://stackoverflow.com/questions/5905054/how-can-i-recursively-find-all-files-in-current-and-subfolders-based-on-wildcard#5905066)
find . -type f -name "*.conf"
find / -iname '*C*.xml'   2>&1 | grep -v "Permission denied"
find . -name "*.wanted" | xargs wc -l
sudo updatedb
And, to use it to look for some particular file type

locate filename
updates db at 1AM would look like:
0 1 * * * updatedb

Or, to look for filename or patter from within current directory, you can type:

 pwd | xargs -n 1 -I {} locate "filepattern"



- 일단 실행파일에 저장됨.
#+BEGIN_SRC emacs-lisp

(defun dired-do-eshell-command (command)
  "Run an Eshell command on the marked files."
  (interactive "sEshell command: ")
  (let ((files (dired-get-marked-files t)))
    (eshell-command
     (format "%s %s" command (mapconcat #'identity files " ")))))
;; use M-x dired-do-eshell-command 리턴키 grep -nH --color {{검색어패턴} 리턴}
;; grep marked files in the dired mode https://emacs.stackexchange.com/questions/30855/how-to-grep-marked-files-in-the-dired-mode-of-emacs/30866
;; 매우 유용하므로 연구가 필요하다. my_fun_함수명으로 변경하여 일괄관리도 고려할 것. 또한 사이트를 자주 보고 패턴을 익힐 것.

;; 아래는 테스트가 필요함
(defun test1 (mes1)
  "hi"
  (interactive)
  (message "you entered mes1 as %s" mes1))

#+END_SRC


** 검색의 핵심은 find-grep과 find-dired ..*scratch* 
-type f -exec grep -q -e gentoo \{\} \ ;

-type f -exec grep -q -e gentoo \{\} \;

find . -type f -exec grep --color -nH --null -e gentoo \{\} +


(find-grep-lisp "~/config_github -type f -exec grep --color -nH --null -e gentoo \{\} +")

(grep-find "~/config_github -type f -exec grep --color -nH --null -e gentoo \{\} +")



(find-dired "~/config_github" "-type f -exec grep -q -e gentoo \{\} \;")error
(find-dired "~/config_github" "-type f -exec grep -q -e gentoo \{\} +")




(find-grep "find ~/config_github -type f -exec grep --color -nH --null -e gentoo \{\} +")
(find-dired "~/config_github" "-type f -exec grep -q -e gentoo \{\} +")


(find-dired "~/config_github" "-type f -name gentoo")

find-dired is an interactive autoloaded compiled Lisp function in
‘find-dired.el’.

(find-dired DIR ARGS)

Run ‘find’ and go into Dired mode on a buffer of the output.
The command run (after changing into DIR) is essentially

    find . \( ARGS \) -ls

except that the car of the variable ‘find-ls-option’ specifies what to
use in place of "-ls" as the final argument.

[forward]





find-grep is an alias for ‘grep-find’ in ‘grep.el’.

(find-grep COMMAND-ARGS)

Run grep via find, with user-specified args COMMAND-ARGS.
Collect output in a buffer.
While find runs asynchronously, you can use the C-x ` command
to find the text that grep hits refer to.

This command uses a special history list for its arguments, so you can
easily repeat a find command.

[back]


** etc.. 

*
