
(원하는 도움말 기능을 바로 검색할 수 있을까?) 즉시 찾을 수 있도록 해서 유동성을 높인다.


(elisp-index-search "elisp")

(Info-virtual-index)
(Info-index)

(Info-apropos-find-node "Help" "Help")
(Info-apropos-find-node FILENAME NODENAME &optional NO-GOING-BACK)

Apropos-specific implementation of ‘Info-find-node-2’.
Info-backward-node 	Info-copy-current-node-name 	Info-directory 	Info-exit
Info-final-node 	Info-follow-nearest-node 	Info-follow-reference 	Info-forward-node
Info-goto-emacs-command-node 	Info-goto-emacs-key-command-node 	Info-goto-node 	Info-help
Info-history 	Info-history-back 	Info-history-forward 	Info-index
Info-index-next 	Info-last 	Info-last-menu-item 	Info-last-preorder
Info-menu 	Info-mode 	Info-mode-menu 	Info-mouse-follow-link
Info-mouse-follow-nearest-node 	Info-mouse-scroll-down 	Info-mouse-scroll-up 	Info-next
Info-next-menu-item 	Info-next-preorder 	Info-next-reference 	Info-nth-menu-item
Info-on-current-buffer 	Info-prev 	Info-prev-reference 	Info-scroll-down
Info-scroll-up 	Info-search 	Info-search-backward 	Info-search-case-sensitively
Info-search-next 	Info-speedbar-browser 	Info-split 	Info-summary
Info-tagify 	Info-toc 	Info-top-node 	Info-undefined
Info-up 	Info-validate 	Info-virtual-index

* (Info-help) ;아래의 출력이 나오는 기본의 명령이다. 기초를 탄탄히 연구할 것.
  - Note Info mode shortcut by  ?Key Pressing on [2020-01-03 Fri 11:56] \\
    Info mode shortcut by  ?Key Pressing
    n move to the "next" node of this node.
    p Move to the "previous" node of this node.
    ^ Move "up" from this node.
    d Go to the Info directory node.
    < Go to the Top node of this file.
    > Go to the final node in this file.
    [ Go backward one node, considering all nodes as forming one sequence.
    ] Go forward one node, considering all nodes as forming one sequence.
    Tab Move cursor to next cross-reference or menu item.
    C-M-i Move cursor to previous cross-reference or menu item.
    f Follow a cross reference. Reads name of reference.
    l Move back in history to the last node you were at.
    r Move forward in history to the node you returned from after using l.
    L Go to mneu of visited nodes.
    T Go to table of contents of the current Info file.
    
    Moving within a node:
    SPC Normally, scroll forward a full screen.
    Once you scrool far enough in a node that its menu appears on the screen but after point, the next scroll moves into its first subnode.
    When after all menu items (or if there is no menu), move up to the parent node.
    DEL Normally, scroll backward. If the beginning of the buffer is already visible, try to go to the previous menu entry, or up if there is none.
    b Go to beginning of node.
    
    Advanced commands:
    s Search through this Info file for specified regexp, and select the node in which the next occurrence is found.
    S Search through this Info file for specified regexp case-sensitively.
    C-s, C-M-s Use Isearch to search through multiple Info nodes.
    i Search for a topic in thhis manual's Index and go to index entry.
     (comma) Move to the next match from a previous i command.
    I Look for a string and display the index node with results.
    M-x info-apropos Look for a string in the indices of all manuals.
    g Move to node specified by name.
     You may include a filename as well, as (FILENAME) NODENAME.
    1 .. 9 Pick first ... ninth item in node's menu.
    Every third '*' is highlighted to help pick the right number.
    c Put name of current Info node in the kill ring.
    M-n Select a new cloned Info buffer in another window.
    C-u C-h i Move to new Info file with completion.
    C-u N C-h i Select Info buffer with prefix number in the name *info*<N>.
    
    This mode runs the hook 'Info-mode-hook', as the final or penultimate step during initialization.


  - Note 기본키사용법노트 taken on [2020-01-03 Fri 11:53] \\
    n, p, u, tab, S-tab 기본키를 익힐 것.
  - Note taken on [2020-01-03 Fri 11:53] \\
    >> Type ‘n’ to move there.  Type just one character;
       do not type the quotes and do not type a <RET> afterward.
    
    ‘>>’ in the margin means it is really time to try a command.
    
    >> If you are in Emacs and have a mouse, and if you already practiced
       typing ‘n’ to get to the next node, click now with the left
       mouse button on the ‘Next’ link to do the same “the mouse way”.



(elisp-index-search "Key Help")

(elisp-index-search "Number")
(elisp-index-search TOPIC)
(Info-virtual-index "")
(Info-virtual-index "")


* 기본단축키
l(왼쪽에 있어서)	help-go-back
r(오른쪽 있어서)	help-go-forward

C-c C-b		help-go-back
C-c C-f		help-go-forward

TAB		forward-button
C-M-i		backward-button




‘<RET>’ echo hi
     Follow a cross reference at point (‘help-follow’).
‘<TAB>’
     Move point forward to the next hyperlink (‘forward-button’).
‘S-<TAB>’
     Move point back to the previous hyperlink (‘backward-button’).
‘mouse-1’
‘mouse-2’
     Follow a hyperlink that you click on.
‘C-c C-c’
     Show all documentation about the symbol at point
     (‘help-follow-symbol’).
‘C-c C-f’
‘r’
     Go forward to the next help topic (‘help-go-forward’).
‘C-c C-b’
‘l’
     Go back to the previous help topic (‘help-go-back’).


* 단축키모음

  - Note taken on [2020-01-03 Fri 10:50] \\
    C-c		Prefix Command
    TAB		forward-button
    RET		help-follow
    ESC		Prefix Command
    SPC		scroll-up-command
    -		negative-argument
    0 .. 9		digit-argument
    <		beginning-of-buffer
    >		end-of-buffer
    ?		describe-mode
    g		revert-buffer
    h		describe-mode
    l		help-go-back
    q		quit-window
    r		help-go-forward
    DEL		scroll-down-command
    S-SPC		scroll-down-command
    <XF86Back>	help-go-back
    <XF86Forward>	help-go-forward
    <backtab>	backward-button
    <mouse-2>	help-follow-mouse
    <remap>		Prefix Command
    
    C-c C-b		help-go-back
    C-c C-c		help-follow-symbol
    C-c C-f		help-go-forward
    
    C-M-i		backward-button



* ㅁ





프로세스의 실행으로 저장해 둘 내용임 (C-h f shell-command RET로 찾아냄)
start-process is a compiled Lisp function in ‘subr.el’.

(start-process NAME BUFFER PROGRAM &rest PROGRAM-ARGS)

Start a program in a subprocess.  Return the process object for it.
NAME is name for process.  It is modified if necessary to make it unique.
BUFFER is the buffer (or buffer name) to associate with the process.

Process output (both standard output and standard error streams)
goes at end of BUFFER, unless you specify a filter function to
handle the output.  BUFFER may also be nil, meaning that this
process is not associated with any buffer.

PROGRAM is the program file name.  It is searched for in ‘exec-path’
(which see).  If nil, just associate a pty with the buffer.  Remaining
arguments PROGRAM-ARGS are strings to give program as arguments.

If you want to separate standard output from standard error, use
‘make-process’ or invoke the command through a shell and redirect
one of them using the shell syntax.

The process runs in ‘default-directory’ if that is local (as
determined by ‘unhandled-file-name-directory’), or "~"
otherwise.  If you want to run a process in a remote directory
use ‘start-file-process’.

[back]



call-process is a built-in function in ‘C source code’.

(call-process PROGRAM &optional INFILE DESTINATION DISPLAY &rest ARGS)

Call PROGRAM synchronously in separate process.
The remaining arguments are optional.
The program’s input comes from file INFILE (nil means ‘null-device’).

Third argument DESTINATION specifies how to handle program’s output.
If DESTINATION is a buffer, or t that stands for the current buffer,
 it means insert output in that buffer before point.
If DESTINATION is nil, it means discard output; 0 means discard
 and don’t wait for the program to terminate.
If DESTINATION is ‘(:file FILE)’, where FILE is a file name string,
 it means that output should be written to that file (if the file
 already exists it is overwritten).
DESTINATION can also have the form (REAL-BUFFER STDERR-FILE); in that case,
 REAL-BUFFER says what to do with standard output, as above,
 while STDERR-FILE says what to do with standard error in the child.
 STDERR-FILE may be nil (discard standard error output),
 t (mix it with ordinary output), or a file name string.

Fourth arg DISPLAY non-nil means redisplay buffer as output is inserted.
Remaining arguments ARGS are strings passed as command arguments to PROGRAM.

If executable PROGRAM can’t be found as an executable, ‘call-process’
signals a Lisp error.  ‘call-process’ reports errors in execution of
the program only through its return and output.

If DESTINATION is 0, ‘call-process’ returns immediately with value nil.
Otherwise it waits for PROGRAM to terminate
and returns a numeric exit status or a signal description string.
If you quit, the process is killed with SIGINT, or SIGKILL if you quit again.

The process runs in ‘default-directory’ if that is local (as
determined by ‘unhandled-file-name-directory’), or "~" otherwise.  If
you want to run a process in a remote directory use ‘process-file’.

[back]
