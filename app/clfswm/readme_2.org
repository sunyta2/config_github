(ql:add-to-init-file)

I will append the following lines to #P"/home/thinkpad/.sbclrc":

  ;;; The following lines added by ql:add-to-init-file:
  #-quicklisp
  (let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                         (user-homedir-pathname))))
    (when (probe-file quicklisp-init)
      (load quicklisp-init)))

Press Enter to continue.

#P"/home/thinkpad/.sbclrc"
(find-file "/home/thinkpad/.sbclrc")
* 
[[http://quickdocs.org/stumpwm/][stumpwm | Quickdocs]] 여기서 설정법을 참조할 것

C-t h v	Variables
C-t h f	Functions
C-t h k	Key sequences
C-t h c	Commands
C-t h w	Find key sequences for a command
$ curl -O https://beta.quicklisp.org/quicklisp.lisp
$ sbcl --load quicklisp.lisp
Then at the REPL:

(quicklisp-quickstart:install)
Make sure you have added it to your lisp init file using:

 (ql:add-to-init-file)
Then, in a repl:

 (ql:quickload "clx")
 (ql:quickload "cl-ppcre")
 (ql:quickload "alexandria")

 
* Installation
[[http://quickdocs.org/clfswm/][clfswm | Quickdocs]]
Boot up a common lisp implementation. I develop it with sbcl, I test
it with cmucl regularly and I use it with clisp (you need the clx/xlib
package).

To use CLFSWM, load the load.lisp file. It loads the ASDF package,
build the system and start the main loop. Then it dumps an executable
image. it may also install files for you in a standard directory
(/usr/local for example).

Have a look at load.lisp for more details. You can also make a copy and
tweak it.

Another way is to do something like this:
$ cd /in/the/directory/of/clfswm/
$ clisp/cmucl/sbcl/...                  # start a lisp
  > (load "asdf.lisp")                  ; asdf for clisp or cmucl
or> (require :asdf)                     ; asdf for sbcl
  > (require :clx)                      ; clx for cmucl
  > (asdf:oos 'asdf:load-op :clfswm)    ; compile and load the system
  > (in-package :clfswm)                ; go in the clfswm package
  > (clfswm:main)                       ; start the main loop
* 
[[https://trac.common-lisp.net/clfswm/wiki/Setup][Setup – clfswm]]
CLFSWM Setup
CLFSWM Setup
Running the system
A way to test CLFSWM
CLFSWM with ​QuickLisp
Running the system
To run CLFSWM you need

A Common Lisp implementation. One of ​clisp, ​sbcl or ​cmucl can do the job. Personnaly, I run CLFSWM every days with clisp and mit/clx and I develop it with sbcl and slime. (Here is a way to build clisp with the mit/clx module).
Get CLFSWM from http://common-lisp.net/project/clfswm and untar the archive somewhere.
Go in the clfswm directory, run your lisp implementation and load the file 'load.lisp' to build a CLFSWM executable image:
type (load "load.lisp") at the lisp prompt.
This can be done automatically depending the lisp implementation you're using.
For example:

   clisp load.lisp
or sbcl --load load.lisp
or cmucl -load load.lisp
When CLFSWM is running, press Alt+F1 to open the help menu.
By default Alt+t make you in the second mode and 'm' open the root menu.

If you want to run CLFSWM at X startup. Add one of the line to start CLFSWM in $HOME/.xsession, $HOME/.xinitrc or $HOME/.Xclients depending the way you start X.
For example, here is the line in my $HOME/.Xclients:
screen -dmS clfswm clisp -repl -q -ansi -K full $home/local/clfswm/load.lisp
So I can reattach CLFSWM in a ​screen session when it crash.

A way to test CLFSWM
Here is how I develop CLFSWM with emacs+slime and sbcl.

I launch emacs+slime with an sbcl image.
I start a new X server:
startx -- :1
From the first display, in slime, I load CLFSWM:
(require :clx)
(require :clfswm)

(in-package :clfswm)

(clfswm:main :display ":1")
Then I switch to the display ":1" and do my tests.
CLFSWM with ​QuickLisp
Another way to build CLFSWM is to use ​QuickLisp:

Here is the ​QuickLisp installation:

$ wget http://beta.quicklisp.org/quicklisp.lisp
$ your lisp (clisp, sbcl, cmucl, ccl, ecl...)
> (load "quicklisp.lisp")
> (quicklisp-quickstart:install)
> (ql:add-to-init-file)
Here, '$' is the shell prompt and '>' is the Lisp prompt.

And then in a display without a window manager or a new display launched with 'startx -- :1' for example:

$ your lisp (clisp, sbcl, cmucl, ccl, ecl...)
> (ql:quickload "clfswm")
> (clfswm:main)
And that's it. CLFSWM is (hopefully) running.
