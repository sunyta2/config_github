
강점을 비교함=> file:../wm_compare_youtube_note.org
[[file:readme.org][stumpwm/readme]] , [[file:~/config_github/app/herbstluftwm/readme.org][herbstluftwm/readme]], [[file:~/config_github/app/xmonad/readme.org][xmonad/readme]] , [[file:~/config_github/app/qtile/readme.org][qtile/readme]] , [[file:~/config_github/app/dwm/readme.org][dwm/readme]] ,
[[file:~/config_github/app/exwm/readme.org][exwm/readme]] , awesome, i3-gap

(man "xmonad")  # man mode 
mod-q Restart xmonad
    xephyer를 사용하면 여러개를 사용하는 것을 dt로 부터 알게 됨. xmonad 2parts에서도 나옴을 참조할 것
    (man "xephyr")  # man mode



하스켈을 익히기 위해서 설치를 시도함.
[2020-01-14 Tue] 맥북을 내부청소하고 쿨링 작업을 위해 먼지청소와 써멀을 발라줌.
[2020-01-15 Wed 09:37] sudo pacman -Syu xmobar
touch ~/.xmobarrc

연구를 하는 장소
 file:../../app/xmonad
 file:../../language_computer/haskell
refresh "xmonad --recompile && xmoad --restart


quit xmonad is 
mod is opt 

opt + shift + return terminal
mod-p launch dmenu
mod-space rotate throught the available layout algorithms
mod-shift-space Reset the layouts on the current workspace to default
mod-n Resize viewed windowns to the correct size
mod-tab Move focus to the next window
mod-j Move tocus to the next window
mod-k Move focus to the previous window
mod-shift-c Close window
mod-drag


~/.xmonad/xmonad.hs
locate xmonad.sh
/usr/share/xmonad/man/xmonad.hs
cp /usr/share/xmonad/man/xmonad.hs ~/.xmonad/xmonad.hs

mod1 IS ALT KEY
mod4 IS SUPER KEY
RESTART is Mod+q

yay xmonad-contrib # 설치를 권고받음. https://youtu.be/JLz3UKJFMoI?t=1250

.config/xmobar/.xmobarrc 폴더를 만들어야 실행된다고 함.

** 강점 (dwm과 비교하여서)
- 언어의 우수성에서 높은 결합확장성을 보인다. 감탄. 폭발적인 레이아웃변경의 결합능력에 감탄함.
- 최대강점: 멀티모니터프로젝터 실행시 자동으로 screen Swap기능이 우수함!
- 레이아웃을 각각 다르게 미리 지정할 수 있다.
      !!또한 배열과 순서를 전혀 다르게 짤 수 있다!!!
- 변경을 직접바로 즉시 실행할 수 있다.
- 하스켈을 공부할 수 있다! ghci를 사용하여 pdf문서로 놀라운 아이디어의 보고

# .config/xmonad/ 폴더에 저장할 수 도 있다하니 고려할 것. xmonad.hs

- Dwm보다 우수한 선택이 가능하다 각 창의 크기를 각각 다르게 설정할 수 있다.
- CMD-Tab로 보다 유연한 선택이 가능하다.

- layout을 선택하는 법이 가능하다. 폭발적인 레이아웃변경의 결합능력에 감탄함.
- Emacs만 선별raise 있음.
* ~/.xmonad/xmonad.hs
(find-file "~/.xmonad/xmonad.hs")
* 설치시 유의사항
git에서 설치하는 것이 실행됨
다른 앱의 경우도 그런가 버전은 낮아도 직접 컴파일하는 것이 각종 import를 인식해서 작동됨
그전에는 인식문제 발생했음
- gmrun을 yay 1로 설치해야 함

* 스터디



      :tangle_test_pastebin_com:       
[[https://pastebin.com/VJSTWjPH][-Haskell- import System.IO import System.Exit import XMonad import Data.Int import Dat - Pastebin.com]]
  #+begin_src haskell :results silent :tangle ./tangle_test/pastebin.com_xmonad.hs
--[[https://pastebin.com/VJSTWjPH][-Haskell- import System.IO import System.Exit import XMonad import Data.Int import Dat - Pastebin.com]]
  import System.IO
  import System.Exitt
  import XMonad
  import Data.Int
  import Data.Ratio
  import Data.List.Split

  import XMonad.Layout.Tabbed
  import XMonad.Layout.Accordion
  import XMonad.Layout.NoBorders
  import XMonad.Layout.Spacing
  import XMonad.Layout.Renamed
  import XMonad.Layout.BinarySpacePartition
  import XMonad.Layout.LayoutModifier
  import XMonad.Layout.NoFrillsDecoration
  import XMonad.Layout.DwmStyle
  import XMonad.Layout.PerWorkspace
  import XMonad.Layout.ThreeColumns

  import XMonad.Actions.FloatKeys
  import XMonad.Actions.FloatSnap
  import XMonad.Actions.NoBorders
  import XMonad.Actions.WindowGo
  import XMonad.Actions.CycleWS
  import XMonad.Actions.CopyWindow
  import XMonad.Actions.Submap
  import XMonad.Actions.MessageFeedback
  import XMonad.Actions.Navigation2D
  import qualified XMonad.Actions.FlexibleResize as Flex

  import XMonad.Util.EZConfig
  import XMonad.Util.Run(spawnPipe)
  import XMonad.Util.Scratchpad
  import XMonad.Util.NamedScratchpad
  import XMonad.Util.Ungrab

  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.UrgencyHook
  import XMonad.Hooks.EwmhDesktops
  import XMonad.Hooks.ManageHelpers
  import XMonad.Hooks.SetWMName

  import XMonad.Prompt
  import XMonad.Prompt.ConfirmPrompt

  import qualified XMonad.StackSet as W
  import qualified Data.Map as M
  import qualified Data.List as L
  import qualified Data.Text as T
  import qualified Data.Ord as O
  import Data.Maybe (fromMaybe, fromJust)

  screen_width = 1920
  screen_height = 1200

  base03  = "#002b36"
  base02  = "#073642"
  base01  = "#586e75"
  base00  = "#657b83"
  base0   = "#839496"
  base1   = "#93a1a1"
  base2   = "#eee8d5"
  base3   = "#fdf6e3"
  yellow  = "#b58900"
  orange  = "#cb4b16"
  red     = "#dc322f"
  magenta = "#d33682"
  violet  = "#6c71c4"
  blue    = "#268bd2"
  cyan    = "#2aa198"
  green   = "#859900"
  black   = "#000000"

  myTerminal = "st "
  myBrowser = "firefox"

  myEditor      = "st -T neovim -n st-nvim -e launch_editor.sh"
  myModMask     = mod4Mask -- Win key or Super_L
  altMask       = mod1Mask -- Win key or Super_L
  ctrlMask      = controlMask

  wsGen = "GEN"
  wsWeb = "WEB"
  wsDev = "DEV"
  wsAV  = "AV"
  wsNSP = "NSP"

  myWorkspaces = [wsGen, wsWeb, wsDev, wsAV] ++ map show [5..9] ++ [wsNSP]

  desktopCmd :: String -> String
  desktopCmd command = "dex ~/.local/share/applications/" ++ command ++ ".desktop"

  myScratchpads :: [NamedScratchpad]
  myScratchpads =
      [
          NS "terminal"   cmdTerm      (appName   =? "terminal_scratchpad") topFloating ,
          NS "pdf"        cmdPDF       (appName   =? "zathura_scratchpad")  rightFloating ,
          NS "music"      cmdMusic     (appName   =? "music_scratchpad")    rightFloating ,
          NS "podcast"    cmdPodcast   (className =? "podcast" )            rightFloating ,
          NS "syncthing"  cmdSyncthing (className =? "syncthing" )          rightFloating ,
          NS "browser"    cmdBrowser   (className =? myBrowser )            nonFloating ,
          NS "empty"      cmdEmpty     (appName   =? "pseudoframe" )        nonFloating ,
          NS "slack"      cmdSlack     (className =? "slack" )              rightFloating ,
          NS "mail"       cmdMail      (appName   =? "mail_scratchpad")     centerFLoating ,
          NS "rss"        cmdRSS       (appName   =? "rss_scratchpad")      centerFLoating ,
          NS "web"        cmdWeb       (appName   =? "web_scratchpad")      centerFLoating ,
          NS "fsearch"    cmdSearch    (appName   =? "fsearch_scratchpad")  leftFloating
      ] 
    where 
      topFloating = myFloatingHook    (1/6)    0       (2/3)   (2/3)
      rightFloating = myFloatingHook  (16/32) (1/18)   (15/32) (16/18)
      leftFloating = myFloatingHook   (1/32)  (1/18)   (14/32) (16/18)
      centerFLoating = myFloatingHook (1/6)   (1/6)    (2/3)   (4/6)
      cmdTerm = terminalNamed "terminal_scratchpad -e tmux -f ~/.config/tmux/tmux.conf -2 attach"
      cmdEmpty = terminalNamed "pseudoframe"
      cmdPDF = "zathura --name zathura_scratchpad"
      cmdMusic = terminalNamed "music_scratchpad -e ncmpcpp"
      cmdPodcast = desktopCmd "pocketcasts"
      cmdSyncthing = desktopCmd "syncthing"
      cmdSlack = desktopCmd "slack"
      cmdBrowser = desktopCmd myBrowser
      cmdMail = terminalNamed "mail_scratchpad -e neomutt"
      cmdRSS = terminalNamed "rss_scratchpad -e newsboat"
      cmdWeb = "qutebrowser --qt-arg name web_scratchpad"
      cmdSearch = "fsearch --name fsearch_scratchpad"

      terminalNamed :: String -> String
      terminalNamed = (++) (myTerminal ++ "-n ")
    
      myFloatingHook :: Rational -> Rational -> Rational -> Rational -> ManageHook
      myFloatingHook x y w h = customFloating $ W.RationalRect x y w h

  myLayoutHook = renamed [CutWordsLeft 1] $ avoidStruts $ smartBorders $ mySpacing $ onWorkspace "AV" (myFull ||| myTiled) $ myLayouts
      where
          myLayouts = myTiled ||| myBSP ||| myThreeCol ||| myTiledSmall ||| myFull
          myTiled =      rename "Tall" $ Tall 1 (3/100) (3/5)
          myTiledSmall = rename "Tall/2" $ Tall 1 (3/100) (1/2)
          myBSP =        rename "BSP" $ emptyBSP
          myFull =       rename "Full" $ Full
          myAccordion =  rename "Accordion" $ Mirror Accordion
          myThreeCol =   rename "ThreeCol" $ ThreeColMid 1 (3/100) (1/2) 
          mySpacing = spacingRaw True border True border True 
          --myDecoration = noFrillsDeco shrinkText myDecorationConfig

          --myDecorationConfig = def { activeColor = yellow
          --                         , activeTextColor = yellow
          --                         , activeBorderColor = yellow
          --                         , inactiveColor = base03
          --                         , inactiveTextColor = base03
          --                         , inactiveBorderColor = base03
          --                         , urgentColor = red
          --                         , urgentTextColor = red
          --                         , urgentBorderColor = red
          --                         , decoHeight = 8
          --                         }
          rename :: String -> l a -> ModifiedLayout Rename l a 
          rename name = renamed [Replace name]

          bs = 8
          border = Border bs bs bs bs

  myManageHook :: ManageHook
  myManageHook = namedScratchpadManageHook myScratchpads <+> composeAll
      [ className =? "lxqt-openssh-askpass"   --> doFloat
      , className =? "mpv"                    --> rectFloat
      , className =? "gnuplot_qt"             --> doFloat
      , className =? "podcast"                --> doFloat
      , className =? "slack"                  --> doFloat
      , className =? "Steam"                  --> doShift "AV"
      , appName   =? "pseudoframe"            --> hasBorder False
      , title     =? "Cuboid"                 --> doFloat
      , className =? "dzen"                   --> doFloat
      , title     =? "Python Turtle Graphics" --> doFloat
      , currentWs =? wsDev                    --> keepMaster "st-nvim" 
      , appName   =? "Popup"                  --> hasBorder False
      , appName   =? "Toolkit"                --> doFloat
      , isDialog                              --> doFloat
      , manageDocks
      ]
          where
              rectFloat = doRectFloat $ W.RationalRect (6/8) (6/8) (2/8 - 1/32) (2/8 - 1/32)
              keepMaster :: String -> ManageHook
              keepMaster c = assertSlave <+> assertMaster
                  where
                      assertSlave = fmap (/= c) className --> doF W.swapDown
                      assertMaster = className =? c --> doF W.swapMaster

  inputDoc :: String -> String -> String -> X Handle
  inputDoc name fg bg = do
    -- focused screen location/size
      handle <- spawnPipe $ unwords [ "~/.local/bin/showHintForInputMode.sh"
                                    , show name
                                    , show fg
                                    , show bg
                                    , "22"
                                    ]
      return handle

  keyMapDoc :: String -> String -> String -> Int -> X Handle
  keyMapDoc desc id color delay = do
    -- focused screen location/size
      handle <- spawnPipe $ unwords [ "~/.local/bin/showHintForKeymap.sh"
                                    , desc
                                    , id
                                    , "22"
                                    , show delay
                                    , show color
                                    , show 0
                                    ]
      return handle

  -- | Given a list of key bindings, return an action that temporay modifies
  --   your bindings. Hit `Escape` to switch back to normal key bindings.

  inputMode :: Handle -> [((KeyMask, KeySym), X ())] -> X ()
  inputMode handle bindings = submap modeMap
    where 
        modeMap = M.fromList
                  $ ((0, xK_Escape), inputModeAction handle $ return ())
                  : [ (maskedKey, (inputModeAction handle action) >> submap modeMap)
                    | (maskedKey, action) <- bindings
                    ]
                        where 
                            inputModeAction handle action = do
                                io $ hClose handle
                                action


  rmDesc :: [(a,b,c)] -> [(a,b)]
  rmDesc x = [(t1,t2) | (t1,t2,_) <- x]

  fmtDesc :: String -> [(String, a, String)] -> Int -> String -> String -> String
  fmtDesc name map rows fg hl | name == "" = "'" ++ "\\n" ++ list ++ "'"
                              | otherwise  = "'" ++ colStr hl ++ name ++ "\\n\\n" ++ list ++ "'"
      where
          list = L.intercalate "\\n" (foldr (zipWithMore (++)) [""] col)
          col = chunksOf nRows $ colDesc map
          --sortKeys  = L.sortBy (\(a,_,_) (b,_,_) -> compare a b)
          maxChars = 200
          lMap = length map
          nRows = min rows lMap
          nCol = max 1 $ ceiling $ fromIntegral lMap / fromIntegral nRows
          charsPerCol = quot maxChars nCol
          charsPerICol = quot charsPerCol 2

          descAlign = charsPerICol
          keyAlign = charsPerICol
  
          colDesc :: [(String, a, String)] -> [String]
          colDesc x = [ colStr hl ++ rAlign keyAlign key ++ " " ++ colStr fg ++ lAlign descAlign desc | (key,_,desc) <- x]
  
          colStr :: String -> String
          colStr col = "^fg(" ++ col ++ ")"
  
          rAlign :: Int -> String -> String
          rAlign = textAlign T.justifyRight
  
          lAlign :: Int -> String -> String
          lAlign = textAlign T.justifyLeft

          textAlign :: (Int -> Char -> T.Text -> T.Text) -> Int -> (String -> String)
          textAlign fAlign n = T.unpack . (fAlign n ' ') . T.pack
  
          zipWithMore :: (a -> a -> a) -> [a] -> [a] -> [a]
          zipWithMore f (a:as) (b:bs) = f a b : zipWithMore f as bs
          zipWithMore _ []      bs    = bs -- if there's more in bs, use that
          zipWithMore _ as      []    = as -- if there's more in as, use that


  toSubmapP :: XConfig l -> String -> [(String, X (), String)] -> X ()
  toSubmapP c name map = do
    p1 <- inputDoc name base3 red
    p2 <- keyMapDoc desc "dzen_xmonad_p" black 1
    inputMode p2 $ getKeymap c keyMap
    io $ hClose p1
          where
              desc = fmtDesc "" map 4 base1 red
              keyMap = rmDesc map
              getKeymap c map = M.toList (mkKeymap c $ map)

  toSubmap :: XConfig l -> String -> [(String, X (), String)] -> X ()
  toSubmap c name map = do
      pipe <- keyMapDoc desc "dzen_xmonad" black 1
      submap $ mkKeymap c keyMap
      io $ hClose pipe
          where
              desc = fmtDesc name map 5 base0 yellow
              keyMap = rmDesc map


  -- Scratchpads ==========================================
  -- ======================================================
  appKeymap :: [([Char], X (), [Char])]
  appKeymap =
      [ ("c",        sp "podcast", "Podcast")
      , ("d",        sp "slack", "DeaDBeeF Slack")
      , ("s",        sp "syncthing", "Syncthing")
      , ("m",        sp "mail", "Mail")
      , ("r",        sp "rss", "RSS")
      , ("a",        sp "music", "Music Player")
      , ("p",        sp "pdf", "PDF Viewer")
      , ("<Return>", sp "terminal", "Terminal")
      , ("b",        sp "browser", "Browser")
      , ("e",        sp "empty", "Empty Window")
      , ("v",        raise $ className =? "mpv", "MPV")
      , ("f",        sp "fsearch", "FSearch")
      ]
          where sp = namedScratchpadAction myScratchpads

  layoutKeymap :: [([Char], X (), [Char])]
  layoutKeymap =
      [ ("n",   sendMessage NextLayout >> showLayout , "Next Layout") -- Next Layout
      , ("r",   sendMessage FirstLayout >> showLayout, "Default Layout") -- Default Layout
      , ("g",   toggleWindowSpacingEnabled, "Toggle Window Spacing")
      , ("k",   incWindowSpacing 4, "Increase Spacing")
      , ("j",   decWindowSpacing 4, "Decrease Spacing")
      ]
          where
              showLayout = dynamicLogString myLayoutPP >>= \d -> spawn $ "dunstify -r 219415356 -t 1500 " ++ d
              myLayoutPP = def { ppTitle = clearStr
                               , ppCurrent = clearStr
                               , ppHidden = clearStr
                               , ppLayout = idStr
                               , ppSep = ""
                               , ppWsSep = ""
                               , ppVisible = clearStr}
              idStr :: String -> String
              idStr a = a
              clearStr :: a -> String
              clearStr _ = ""

  floatKeymap :: [([Char], X (), [Char])]
  floatKeymap =
      [ ("h",   wf $ keysMoveWindow (-dr,  0), "Move Left")
      , ("l",   wf $ keysMoveWindow ( dr,  0), "Move Right")
      , ("j",   wf $ keysMoveWindow (  0, dr), "Move Down")
      , ("k",   wf $ keysMoveWindow (  0,-dr), "Move Up")
      , ("S-h", wf $ snapMove L $ Nothing, "Snap Left")
      , ("S-l", wf $ snapMove R $ Nothing, "Snap Right")
      , ("S-j", wf $ snapMove D $ Nothing, "Snap Down")
      , ("S-k", wf $ snapMove U $ Nothing, "Snap Up")
      , ("y",   wf $ keysMoveWindowTo (ed     ,      ed) (0,0), "Move Top Left")
      , ("u",   wf $ keysMoveWindowTo (sw - 15,      ed) (1,0), "Move Top Right")
      , ("n",   wf $ keysMoveWindowTo (ed     , sh - 37) (0,1), "Move Bottom Left")
      , ("m",   wf $ keysMoveWindowTo (sw - 15, sh - 37) (1,1), "Move Bottom Right")
      ]
          where
              wf = withFocused
              dr = 10
              sw = screen_width
              sh = screen_height
              ed = 12

  bspKeymap :: [([Char], X (), [Char])]
  bspKeymap =
      [ ("l",       sendMessage $ ExpandTowards R, "Expand right")
      , ("h",       sendMessage $ ExpandTowards L, "Expand left")
      , ("j",       sendMessage $ ExpandTowards D, "Expand down")
      , ("k",       sendMessage $ ExpandTowards U, "Expand up")
      , ("S-l",     sendMessage $ ShrinkFrom R, "Shrink right")
      , ("S-h",     sendMessage $ ShrinkFrom L, "Shrink left")
      , ("S-j",     sendMessage $ ShrinkFrom D, "Shrink down")
      , ("S-k",     sendMessage $ ShrinkFrom U, "Shrink up")
      , ("s",       sendMessage $ Swap, "Swap")
      , ("S-s",     sendMessage $ Rotate, "Rotate")
      , ("b",       sendMessage $ Balance, "Balance")
      , ("S-b",     sendMessage $ Equalize, "Equalize")
      ]

  resizeKeymap :: [([Char], X (), [Char])]
  resizeKeymap =
      [ ("h",          tryMsgR (ExpandTowards L) (Shrink), "Shrink Master Area")
      , ("l",          tryMsgR (ExpandTowards R) (Expand), "Expand Master Area")
      ]
          where
              tryMsgR x y = sequence_ [(tryMessageWithNoRefreshToCurrent x y), refresh]

  resizeFloatKeymap :: [([Char], X (), [Char])]
  resizeFloatKeymap =
      [ ("h",   resize (-s, 0), "Resize Left")
      , ("l",   resize (s,  0), "Resize Right")
      , ("k",   resize (0, -s), "Resize Up")
      , ("j",   resize (0,  s), "Resize Down")
      , ("S-h", resize (-b, 0), "Resize Left (fast)")
      , ("S-l", resize (b,  0), "Resize Right (fast)")
      , ("S-k", resize (0, -b), "Resize Up (fast)")
      , ("S-j", resize (0,  b), "Resize Down (fast)")
      ]
          where
              s = 20
              b = 100
              resize d = withFocused (keysResizeWindow d (0, 0))

  mainKeymap :: XConfig l -> [([Char], X (), [Char])]
  mainKeymap c = 
      [ ("M-<Return>",   spawn myTerminal, "Terminal")
      , ("M-S-<Return>", spawn myEditor, "Editor")
      , ("M-/",          spawn "rofi -show window", "Rofi (window mode)")
      , ("M-p",          spawn "rofi -show drun", "Rofi (desktop mode)")
      , ("M-S-p",        spawn "rofi -show run", "Rofi (run mode)")
      , ("M-<Tab>",      nextWindow, "Next Window")
      , ("M-S-<Tab>",    prevWindow, "Previous Window")
      , ("M-n",          refresh, "Default size")
      , ("M-S--",        withFocused (keysMoveWindowTo (sw `div` 2,0) (0.5,0)), "Dock Window in Top Center")
      , ("M-b",          sendMessage ToggleStruts, "Toggle Struts")

      -- move focus up or down the window stack
      , ("M-m",          windows W.focusMaster, "Focus Master Window")
      , ("M-`",          toggleWS' [wsNSP], "Last Focused Worksapce")
      , ("M-<Backspace>", windows $ W.shift wsNSP, "Move to Scratchpad Workspace")

      , ("M-l",          windowGo R False, "Navigate Right")
      , ("M-h",          windowGo L False, "Navigate Left")
      , ("M-k",          windowGo U False, "Navigate Up")
      , ("M-j",          windowGo D False, "Navigate Down")

      , ("M-S-l",        windowSwap R False, "Swap with Right Window")
      , ("M-S-h",        windowSwap L False, "Swap with Left Window")
      , ("M-S-k",        windowSwap U False, "Swap with Upper Window")
      , ("M-S-j",        windowSwap D False, "Swap with Lower Window")

      -- floating layer support
      , ("M-t",          switchLayer, "Switch Layer")
      , ("M-S-t",        withFocused $ windows . W.sink, "Toggle Tiling")

      -- increase or decrease number of windows in the master area
      , ("M-,",          sendMessage (IncMasterN 1), "Increment Master Area")
      , ("M-.",          sendMessage (IncMasterN (-1)), "Deincrement Master Area")

      , ("M-w",          toSubmapP c "Layout Mode" layoutKeymap, "Layout Mode")
      , ("M-f",          toSubmapP c "Float Mode" floatKeymap, "Float Mode")
      , ("M-r",          toSubmapP c "Resize Mode" resizeKeymap, "Resize Mode")
      , ("M-S-r",        toSubmapP c "Resize Mode (Float)" resizeFloatKeymap, "Resize Float Mode")
      , ("M-S-b",        toSubmapP c "BSP Mode" bspKeymap, "BSP Keymap")
      , ("M-<Space>",    toSubmap  c "Launch Mode" appKeymap, "Application Mode")
      , ("M-;",          namedScratchpadAction myScratchpads "terminal", "Terminal Scratchpad")

      -- modifying the window order
      , ("M-S-m",        windows W.swapMaster, "Swap with Master Window")

      , ("M-v",          windows copyToAll, "Copy to all WS")
      , ("M-S-v",        killAllOtherCopies, "Remove copy from other WS")
      , ("M-S-c",        kill, "Close the focused window")
      , ("M-<F1>",       unGrab >> showHelp, "Show Help")
      , ("M-x",          spawn "xkill", "Launch xkill")
      , ("M-S-q",        io exitSuccess, "Quit xmonad")
      , ("M-q",          confirmPrompt myXPConfig "Restart xmonad" $ spawn myRestartCmd, "Restart and recompile xmonad")
      ]
          where
              myXPConfig :: XPConfig
              myXPConfig = def
                  { position          = Bottom
                  , alwaysHighlight   = True
                  , promptBorderWidth = 0
                  , height            = 22
                  , font              = "xft:Source Sans Pro:size=12"
                  , bgColor           = yellow
                  , fgColor           = base3
                  }
              nextWindow = windows W.focusDown
              prevWindow = windows W.focusUp
              sw  = screen_width 
              myRestartCmd  = "if type xmonad; then xmonad --recompile && xmonad --restart; else xmessage xmonad not in \\$PATH: \"$PATH\"; fi"
              showHelp = spawn $ unwords [ "~/.local/bin/showHintForKeymap.sh"
                                  , desc
                                  , "dzen_xmonad"
                                  , show (22 :: Integer)
                                  , show (0 :: Integer)
                                  , show black
                                  , show (1 :: Integer)
                                  ]
              desc = fmtDesc "Help" (mainKeymap c) 14 base1 green

  myWorkspaceKeys :: [((KeyMask, KeySym), X())]
  myWorkspaceKeys = [((m .|. myModMask, k), f i)
          | (i, k) <- zip myWorkspaces [xK_1 .. xK_9]
          , (f, m) <- [(myToggleOrView, 0), (windows . W.shift, shiftMask)]]
              where
                  myToggleOrView = toggleOrDoSkip [wsNSP] W.view

  myMouseBindings :: [((ButtonMask, Button), Window -> X ())]
  myMouseBindings = 
      [ ((myModMask, button3), (\w -> focus w >> Flex.mouseResizeWindow w))
      ]

  myNav2DConfig :: Navigation2DConfig
  myNav2DConfig = def
      { defaultTiledNavigation    = hybridOf sideNavigation centerNavigation
      , floatNavigation           = centerNavigation
      , layoutNavigation          = [("Full", centerNavigation)]
      , unmappedWindowRect        = [("Full", singleWindowRect)]
      }

  myLogHook :: Handle -> X ()
  myLogHook xmproc = dynamicLogWithPP $ xmobarPP
      { ppOutput = hPutStrLn xmproc
      , ppTitle = xmobarColor blue "" . shorten 50
      , ppCurrent = xmobarColor "#c0c0c0" "" . wrap "" ""
      , ppSep = xmobarColor base0 "" "  :  "
      , ppUrgent = xmobarColor red ""
      , ppLayout = xmobarColor yellow ""
          --, ppLayout = const ""
      }

  myConfig xmproc = def
      { terminal    = myTerminal
      , modMask     = myModMask
      , borderWidth = myBorderWidth
      , normalBorderColor = myBorderColorNormal
      , focusedBorderColor = myBorderColorFocused
      , workspaces  = myWorkspaces
      , startupHook = setWMName "LG3D"
      , keys = \c -> mkKeymap c $ rmDesc (mainKeymap c)
      --, handleEventHook = mconcat [
      --    docksEventHook,
      --    handleEventHook def
      --]
      , layoutHook  = myLayoutHook
      , manageHook  = myManageHook <+> manageHook def
      , logHook     = myLogHook xmproc
      }
          where 
              myBorderWidth = 2
              myBorderColorNormal = base01
              myBorderColorFocused = yellow

  main :: IO ()
  main = do
      xmproc <- spawnPipe "~/.config/xmobar/xmobar"
      xmonad $ docks $ ewmh $ withNavigation2DConfig myNav2DConfig
             $ withUrgencyHook NoUrgencyHook $ myConfig xmproc `additionalKeys` myWorkspaceKeys `additionalMouseBindings` myMouseBindings
  #+end_src


#+begin_src sh :results silent
espeak -a 20 -v other/la "amare"
#+end_src
:END:



