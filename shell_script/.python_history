import tkinter
window = tkinter.Tk()
window.mainloop()
window = tkinter.Tk()
window.title("hi youtubetest")
window.title('hi youtubetest')
window = tkinter.Tk()
window.title('hi youtubetest')
window.geometyr('640x480')
window.geometry('640x480')
lbl = tkinter.label(window, text='Hello World')
lbl.place(x = 30, y = 50)
window2 = tkinter.Tk()
window2.geometry('640x480')
window2.title('한글을 입력한다. 무적의 연습을 실시한다.')
lbl = tkinter.label(window2, text='Hello World')
lbl = ter.label(window2, text='Hello World')
class FoobarWrapper(object):
def __init__(slef, wrappee):
def __init__(self, wrappee):
self.w = wrappee
class FoobarWrapper(object):
def __init__(self, wrappee):
if a in b
for i in b
for i in {1..3}
for i in {1..3}:
for i in a:
for j in b:
for i in a:
    for j in b
    for j in b:
class FoobarWrapper(object):
def __init__(slef, wrappee):
self.w  = wrappee
a = 1
a=2
a
a=1+2
a
slef.w = wrappee
def __init__(self, wrappee):
self.w = wrappee
def foobar(self, foo, bar):
return self.w.barfoo(bar, foo)
foobarer= FoobarWrapper(barfooer)
foobarer=FoobarWrapper(barfooer)
Class Adaper (direct)
PER-CLASS, W/SUBLLASING & SELF-DLELEGATION:
CLASS FOOBARER(BARFOOER):
DEF FOOBAR(SLEF, FOO, BAR):
tjf asdf a sdfdf 
 #Class 
# class
# Class adaper (direct)
per class, w/subclasing & self-dlegation:
#per-class/, w/sublclassing & self-dleegation:$2#
class Foobarer(Barfooer):
def foobar(self, foo, bar):
return self.barfoo(bar, foo)
rfoobarer - Foobarer(...w/ever...)
foobarer= Foobarer(...w/ever...)
Class Adaper (mixin)
flexible, good use of multille inehyeritance:
class BF2FB:
def foobar(self, foo, bar):
return self.blarfoo(bvar, foo)
class Foobarer(BF2FB, Barfooer):
pass
foobarer=Foobarer(...w/ever...)
Clsas Adaper (mixin)
umport os
import os
is,getcwd()
is.getcwd()
os.getcwd()
os.chdir(SUBDIR)
print(os.getcwd())
os.chdir('~')
os.chdir('/~')
os.chdir('/Desktop')
os.chdir('~/Desktop')
os.system
for x in "python"
for x in 'python'
for x in "python":
print(x)
for x in "python":
    print(x)
for x in "python"
for x in "python":
    print (x)
    for y in "나무 대방광불화엄경":
		print (y)
for x in "python":
    for y in "abcde":
		print(y)
for x in "python":
    for y in "abcde":
        print(x)
    print(x)
for x in "python":
    for y in "나무 대방광불화엄경":
        print(y)
    print(x)
# for x in "python":
# asdf asdf asd fasd fas df
Wen neeed an indent befoe print, so let's do ti again.
import sys
sys.platform
print(sys.patform)
print(sys.platform)
import math
math.sqrt(1001)
print(math.sqrt(1001))
x = 'blah'
x = 'blah '
print x*3
print (x*3)
print (                " hi " *         3)
print              ( "              good day\n "*3) 
# to fatch the name of the platform and to get sqrt() from math functions.
# runs three print function calls.
#Uses a variable x, created when it;s assigned, to hold a string object.
# the sys.platform is just a string that identifies the computer. It is in a standard Python module, sys, which we must import to load.
# The name of the module could be just stript1 without .py suffix. Vut files of code we want to import into should end witha .py. Because we may wnat to import the script file later, it's recommended to use .py suffix.
# we used shell command lines to start Python programs. So, we can use all the usual shell syntax. For example, we can route the output of a Python to a file to save if:
input ()
fgsdfasdfasefasdf
input ()
from subprocess import Popen
def exec_applescript(script):
    p = Popen(['osascript', '-e', script])
exec_applescript('say "I am singing la la la la" using "Alex" speaking rate 140 pitch 60')
exec_applescript('say "Still singing, hahaha" using "Alex" speaking rate 140 pitch 66')
exec_applescript('say "I am singing la la la la" using "Alex" speaking rate 140 pitch 60')
exec_applescript('say "Still singing, hahaha" using "Alex" speaking rate 140 pitch 66')
print("hi")
quit()
